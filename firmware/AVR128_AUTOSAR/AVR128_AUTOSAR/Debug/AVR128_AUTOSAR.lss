
AVR128_AUTOSAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000d2e  00000dc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800166  00800166  00000e28  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000236a  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001281  00000000  00000000  00003492  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000126a  00000000  00000000  00004713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000408  00000000  00000000  00005980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a93  00000000  00000000  00005d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009df  00000000  00000000  0000681b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000071fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
   6:	00 00       	nop
   8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
   a:	00 00       	nop
   c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
   e:	00 00       	nop
  10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
  12:	00 00       	nop
  14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
  16:	00 00       	nop
  18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
  22:	00 00       	nop
  24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
  26:	00 00       	nop
  28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
  32:	00 00       	nop
  34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
  36:	00 00       	nop
  38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
  42:	00 00       	nop
  44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
  46:	00 00       	nop
  48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
  52:	00 00       	nop
  54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
  56:	00 00       	nop
  58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
  62:	00 00       	nop
  64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
  66:	00 00       	nop
  68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
  72:	00 00       	nop
  74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
  76:	00 00       	nop
  78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
  82:	00 00       	nop
  84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
  86:	00 00       	nop
  88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fa 00       	.word	0x00fa	; ????
  8e:	0c 01       	movw	r0, r24
  90:	1e 01       	movw	r2, r28
  92:	30 01       	movw	r6, r0
  94:	42 01       	movw	r8, r4
  96:	54 01       	movw	r10, r8
  98:	66 01       	movw	r12, r12
  9a:	78 01       	movw	r14, r16
  9c:	8a 01       	movw	r16, r20

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e1       	ldi	r29, 0x10	; 16
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
  aa:	11 e0       	ldi	r17, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	ee e2       	ldi	r30, 0x2E	; 46
  b2:	fd e0       	ldi	r31, 0x0D	; 13
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	0b bf       	out	0x3b, r16	; 59
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a6 36       	cpi	r26, 0x66	; 102
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a6 e6       	ldi	r26, 0x66	; 102
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a4 38       	cpi	r26, 0x84	; 132
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	c0 d2       	rcall	.+1408   	; 0x656 <main>
  d6:	29 c6       	rjmp	.+3154   	; 0xd2a <_exit>

000000d8 <__bad_interrupt>:
  d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <Apl_mainTaskStateInit>:
#include "Apl_Public_Variable.h"


void Apl_mainTaskStateInit(void)
{
	Apl_gpioCurrentSts = APL_TASKLIST_IDLE;
  da:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <Apl_gpioCurrentSts>
	Apl_setEvt(APL_EXECUTE_EVENT_ENTRY, NULL);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	87 e0       	ldi	r24, 0x07	; 7
  e4:	77 c0       	rjmp	.+238    	; 0x1d4 <Apl_setEvt>
  e6:	08 95       	ret

000000e8 <Apl_networkInit>:
	return;
}

void Apl_networkInit(void)
{
	memset((void*)Apl_BufferRead, ZERO, sizeof(Apl_BufferRead));
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	eb e7       	ldi	r30, 0x7B	; 123
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	df 01       	movw	r26, r30
  f0:	98 2f       	mov	r25, r24
  f2:	1d 92       	st	X+, r1
  f4:	9a 95       	dec	r25
  f6:	e9 f7       	brne	.-6      	; 0xf2 <Apl_networkInit+0xa>
	memset((void*)Apl_BufferWrite, ZERO, sizeof(Apl_BufferWrite));
  f8:	e7 e7       	ldi	r30, 0x77	; 119
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  fc:	df 01       	movw	r26, r30
  fe:	1d 92       	st	X+, r1
 100:	8a 95       	dec	r24
 102:	e9 f7       	brne	.-6      	; 0xfe <Apl_networkInit+0x16>
 104:	08 95       	ret

00000106 <Apl_controllerUnitInit>:
	return;	
}

void Apl_controllerUnitInit(void)
{
	memset((void*) ControllerUnit, 0, sizeof(ControllerStr));
 106:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 10a:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	df 01       	movw	r26, r30
 112:	1d 92       	st	X+, r1
 114:	8a 95       	dec	r24
 116:	e9 f7       	brne	.-6      	; 0x112 <Apl_controllerUnitInit+0xc>
	ControllerUnit->ChanelA = CHANEL_CLEAR;
 118:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 11c:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 120:	10 82       	st	Z, r1
	ControllerUnit->chanelB = CHANEL_CLEAR;
 122:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 126:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 12a:	11 82       	std	Z+1, r1	; 0x01
	ControllerUnit->PMW = PMW_CLEAR;
 12c:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 130:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 134:	13 82       	std	Z+3, r1	; 0x03
 136:	12 82       	std	Z+2, r1	; 0x02
	ControllerUnit->flag = ARG_FALSE;
 138:	14 82       	std	Z+4, r1	; 0x04
	
	Apl_FlagCom = E_NOTOK;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Apl_FlagCom>
 140:	08 95       	ret

00000142 <Apl_Init>:
	return;
}

void Apl_Init(void)
{
	BSW_driverInit();
 142:	82 d2       	rcall	.+1284   	; 0x648 <BSW_driverInit>
	Apl_networkInit();
 144:	d1 df       	rcall	.-94     	; 0xe8 <Apl_networkInit>
	Apl_mainTaskStateInit();
 146:	c9 df       	rcall	.-110    	; 0xda <Apl_mainTaskStateInit>
 148:	de cf       	rjmp	.-68     	; 0x106 <Apl_controllerUnitInit>
	Apl_controllerUnitInit();
 14a:	08 95       	ret

0000014c <Apl_gpioChangeState>:
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
	}
};


void Apl_gpioChangeState(uint16 currenstate, void* para)
{
 150:	ec 01       	movw	r28, r24
	uint16 u2a_currentState;
	
	u2a_currentState = currenstate;
	
	if (NULL != Apl_stateMachine[u2a_currentState].evtExit) {
 152:	fc 01       	movw	r30, r24
 154:	ee 0f       	add	r30, r30
 156:	ff 1f       	adc	r31, r31
 158:	cf 01       	movw	r24, r30
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	e8 0f       	add	r30, r24
 168:	f9 1f       	adc	r31, r25
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	00 88       	ldd	r0, Z+16	; 0x10
 170:	f1 89       	ldd	r31, Z+17	; 0x11
 172:	e0 2d       	mov	r30, r0
 174:	30 97       	sbiw	r30, 0x00	; 0
 176:	21 f0       	breq	.+8      	; 0x180 <Apl_gpioChangeState+0x34>
		Apl_stateMachine[currenstate].evtExit(u2a_currentState, NULL);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	70 e0       	ldi	r23, 0x00	; 0
 17c:	ce 01       	movw	r24, r28
 17e:	09 95       	icall
	}
	
	
	if (STATE_MAXNUMBER < u2a_currentState) {
 180:	c5 30       	cpi	r28, 0x05	; 5
 182:	d1 05       	cpc	r29, r1
 184:	18 f4       	brcc	.+6      	; 0x18c <Apl_gpioChangeState+0x40>

void Apl_gpioChangeState(uint16 currenstate, void* para)
{
	uint16 u2a_currentState;
	
	u2a_currentState = currenstate;
 186:	2c 2f       	mov	r18, r28
 188:	3d 2f       	mov	r19, r29
 18a:	02 c0       	rjmp	.+4      	; 0x190 <Apl_gpioChangeState+0x44>
		Apl_stateMachine[currenstate].evtExit(u2a_currentState, NULL);
	}
	
	
	if (STATE_MAXNUMBER < u2a_currentState) {
		u2a_currentState = APL_TASKLIST_IDLE;
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
	}
	
	Apl_gpioCurrentSts = u2a_currentState;
 190:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <Apl_gpioCurrentSts>
	
	if (NULL != Apl_stateMachine[u2a_currentState].evtEntry) {
 194:	82 2f       	mov	r24, r18
 196:	93 2f       	mov	r25, r19
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	fc 01       	movw	r30, r24
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	ee 0f       	add	r30, r30
 1a4:	ff 1f       	adc	r31, r31
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	8e 0f       	add	r24, r30
 1ac:	9f 1f       	adc	r25, r31
 1ae:	fc 01       	movw	r30, r24
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	06 84       	ldd	r0, Z+14	; 0x0e
 1b6:	f7 85       	ldd	r31, Z+15	; 0x0f
 1b8:	e0 2d       	mov	r30, r0
 1ba:	30 97       	sbiw	r30, 0x00	; 0
 1bc:	21 f0       	breq	.+8      	; 0x1c6 <Apl_gpioChangeState+0x7a>
		Apl_stateMachine[u2a_currentState].evtEntry(currenstate, NULL);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	09 95       	icall
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <Apl_getCurrentSts>:
	}
}

uint16 Apl_getCurrentSts(void)
{
	return Apl_gpioCurrentSts;
 1cc:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Apl_gpioCurrentSts>
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	08 95       	ret

000001d4 <Apl_setEvt>:
	if (NULL != Apl_stateMachine[u2a_currentState].evtEntry) {
		Apl_stateMachine[u2a_currentState].evtEntry(currenstate, NULL);
	}
}

void Apl_setEvt(uint8 evtJob, void* para) {
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	c8 2f       	mov	r28, r24
 1dc:	8b 01       	movw	r16, r22
	uint16 CurrentSts;
	
	MainControlSts Controller;

	CurrentSts = Apl_getCurrentSts();
 1de:	f6 df       	rcall	.-20     	; 0x1cc <Apl_getCurrentSts>
	
	Controller = NULL;
	
	switch (evtJob)
 1e0:	4c 2f       	mov	r20, r28
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	49 30       	cpi	r20, 0x09	; 9
 1e6:	51 05       	cpc	r21, r1
 1e8:	08 f0       	brcs	.+2      	; 0x1ec <Apl_setEvt+0x18>
 1ea:	a6 c0       	rjmp	.+332    	; 0x338 <Apl_setEvt+0x164>
 1ec:	fa 01       	movw	r30, r20
 1ee:	ea 5b       	subi	r30, 0xBA	; 186
 1f0:	ff 4f       	sbci	r31, 0xFF	; 255
 1f2:	ad c2       	rjmp	.+1370   	; 0x74e <__tablejump2__>
	{
		case APL_EXECUTE_EVENT_GOSTRAIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtGoStraight;
 1f4:	fc 01       	movw	r30, r24
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	9f 01       	movw	r18, r30
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	22 0f       	add	r18, r18
 202:	33 1f       	adc	r19, r19
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	e2 0f       	add	r30, r18
 20a:	f3 1f       	adc	r31, r19
 20c:	e0 50       	subi	r30, 0x00	; 0
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	01 90       	ld	r0, Z+
 212:	f0 81       	ld	r31, Z
 214:	e0 2d       	mov	r30, r0
			break;
 216:	92 c0       	rjmp	.+292    	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_WAITGOSTRAIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtWaitGoStraight;
 218:	fc 01       	movw	r30, r24
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	9f 01       	movw	r18, r30
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	22 0f       	add	r18, r18
 226:	33 1f       	adc	r19, r19
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	e2 0f       	add	r30, r18
 22e:	f3 1f       	adc	r31, r19
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	02 80       	ldd	r0, Z+2	; 0x02
 236:	f3 81       	ldd	r31, Z+3	; 0x03
 238:	e0 2d       	mov	r30, r0
			break;
 23a:	80 c0       	rjmp	.+256    	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_GOLEFT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtGoLeft;
 23c:	fc 01       	movw	r30, r24
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	9f 01       	movw	r18, r30
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	22 0f       	add	r18, r18
 24a:	33 1f       	adc	r19, r19
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	e2 0f       	add	r30, r18
 252:	f3 1f       	adc	r31, r19
 254:	e0 50       	subi	r30, 0x00	; 0
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	04 80       	ldd	r0, Z+4	; 0x04
 25a:	f5 81       	ldd	r31, Z+5	; 0x05
 25c:	e0 2d       	mov	r30, r0
			break;
 25e:	6e c0       	rjmp	.+220    	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_WAITGOLEFT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtWaitGoLeft;
 260:	fc 01       	movw	r30, r24
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	9f 01       	movw	r18, r30
 268:	22 0f       	add	r18, r18
 26a:	33 1f       	adc	r19, r19
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	22 0f       	add	r18, r18
 272:	33 1f       	adc	r19, r19
 274:	e2 0f       	add	r30, r18
 276:	f3 1f       	adc	r31, r19
 278:	e0 50       	subi	r30, 0x00	; 0
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
 27c:	06 80       	ldd	r0, Z+6	; 0x06
 27e:	f7 81       	ldd	r31, Z+7	; 0x07
 280:	e0 2d       	mov	r30, r0
			break;
 282:	5c c0       	rjmp	.+184    	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_GORIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtGoRight;
 284:	fc 01       	movw	r30, r24
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	9f 01       	movw	r18, r30
 28c:	22 0f       	add	r18, r18
 28e:	33 1f       	adc	r19, r19
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	22 0f       	add	r18, r18
 296:	33 1f       	adc	r19, r19
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	e0 50       	subi	r30, 0x00	; 0
 29e:	ff 4f       	sbci	r31, 0xFF	; 255
 2a0:	00 84       	ldd	r0, Z+8	; 0x08
 2a2:	f1 85       	ldd	r31, Z+9	; 0x09
 2a4:	e0 2d       	mov	r30, r0
			break;
 2a6:	4a c0       	rjmp	.+148    	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_WAITGORIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtWaitGoRigth;
 2a8:	fc 01       	movw	r30, r24
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	9f 01       	movw	r18, r30
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	22 0f       	add	r18, r18
 2ba:	33 1f       	adc	r19, r19
 2bc:	e2 0f       	add	r30, r18
 2be:	f3 1f       	adc	r31, r19
 2c0:	e0 50       	subi	r30, 0x00	; 0
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	02 84       	ldd	r0, Z+10	; 0x0a
 2c6:	f3 85       	ldd	r31, Z+11	; 0x0b
 2c8:	e0 2d       	mov	r30, r0
			break;
 2ca:	38 c0       	rjmp	.+112    	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_COM:
		{
			Controller = Apl_stateMachine[CurrentSts].evtJob;
 2cc:	fc 01       	movw	r30, r24
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	9f 01       	movw	r18, r30
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	e2 0f       	add	r30, r18
 2e2:	f3 1f       	adc	r31, r19
 2e4:	e0 50       	subi	r30, 0x00	; 0
 2e6:	ff 4f       	sbci	r31, 0xFF	; 255
 2e8:	04 84       	ldd	r0, Z+12	; 0x0c
 2ea:	f5 85       	ldd	r31, Z+13	; 0x0d
 2ec:	e0 2d       	mov	r30, r0
			break;
 2ee:	26 c0       	rjmp	.+76     	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_ENTRY:
		{
			Controller = Apl_stateMachine[CurrentSts].evtEntry;
 2f0:	fc 01       	movw	r30, r24
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	9f 01       	movw	r18, r30
 2f8:	22 0f       	add	r18, r18
 2fa:	33 1f       	adc	r19, r19
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	22 0f       	add	r18, r18
 302:	33 1f       	adc	r19, r19
 304:	e2 0f       	add	r30, r18
 306:	f3 1f       	adc	r31, r19
 308:	e0 50       	subi	r30, 0x00	; 0
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	06 84       	ldd	r0, Z+14	; 0x0e
 30e:	f7 85       	ldd	r31, Z+15	; 0x0f
 310:	e0 2d       	mov	r30, r0
			break;
 312:	14 c0       	rjmp	.+40     	; 0x33c <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_EXIT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtExit;
 314:	fc 01       	movw	r30, r24
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	9f 01       	movw	r18, r30
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	22 0f       	add	r18, r18
 326:	33 1f       	adc	r19, r19
 328:	e2 0f       	add	r30, r18
 32a:	f3 1f       	adc	r31, r19
 32c:	e0 50       	subi	r30, 0x00	; 0
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	00 88       	ldd	r0, Z+16	; 0x10
 332:	f1 89       	ldd	r31, Z+17	; 0x11
 334:	e0 2d       	mov	r30, r0
			break;
 336:	02 c0       	rjmp	.+4      	; 0x33c <Apl_setEvt+0x168>
	
	MainControlSts Controller;

	CurrentSts = Apl_getCurrentSts();
	
	Controller = NULL;
 338:	e0 e0       	ldi	r30, 0x00	; 0
 33a:	f0 e0       	ldi	r31, 0x00	; 0
		default:
			break;
		
	}

	if (NULL != Controller) {
 33c:	30 97       	sbiw	r30, 0x00	; 0
 33e:	11 f0       	breq	.+4      	; 0x344 <Apl_setEvt+0x170>
		Controller(CurrentSts, para);
 340:	b8 01       	movw	r22, r16
 342:	09 95       	icall
	}
}
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <Apl_mainIdle_EvReqGoStraight>:

#include "Apl_MainTskIdle.h"

void Apl_mainIdle_EvReqGoStraight(uint16 currentState, void* para)
{
	Apl_gpioChangeState(APL_TASKLIST_GOSTRAIGHT, NULL);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	fb ce       	rjmp	.-522    	; 0x14c <Apl_gpioChangeState>
 356:	08 95       	ret

00000358 <Apl_mainIdle_EvReqGoLeft>:
	return;	
}

void Apl_mainIdle_EvReqGoLeft(uint16 currentState, void* para)
{
 358:	08 95       	ret

0000035a <Apl_mainIdle_EvReqGoRight>:
	return;
}

void Apl_mainIdle_EvReqGoRight(uint16 currentState, void* para)
{
 35a:	08 95       	ret

0000035c <Apl_mainIdle_EvJob>:
	return;
}

void Apl_mainIdle_EvJob(uint16 currentState, void* para)
{
	clr_LCD();
 35c:	2d d1       	rcall	.+602    	; 0x5b8 <clr_LCD>
	move_LCD(0,0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0a d1       	rcall	.+532    	; 0x578 <move_LCD>
	printf_LCD("State IDLE");
 364:	88 e4       	ldi	r24, 0x48	; 72
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	9f 93       	push	r25
 36a:	8f 93       	push	r24
 36c:	44 d1       	rcall	.+648    	; 0x5f6 <printf_LCD>

	PORTE |= (1<<PE4);
 36e:	83 b1       	in	r24, 0x03	; 3
 370:	80 61       	ori	r24, 0x10	; 16
 372:	83 b9       	out	0x03, r24	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	8f e7       	ldi	r24, 0x7F	; 127
 378:	96 e1       	ldi	r25, 0x16	; 22
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <Apl_mainIdle_EvJob+0x1e>
 382:	00 c0       	rjmp	.+0      	; 0x384 <Apl_mainIdle_EvJob+0x28>
 384:	00 00       	nop
	_delay_ms(1000);
	PORTE &= ~(1<<PE4);
 386:	83 b1       	in	r24, 0x03	; 3
 388:	8f 7e       	andi	r24, 0xEF	; 239
 38a:	83 b9       	out	0x03, r24	; 3
 38c:	2f ef       	ldi	r18, 0xFF	; 255
 38e:	8f e7       	ldi	r24, 0x7F	; 127
 390:	96 e1       	ldi	r25, 0x16	; 22
 392:	21 50       	subi	r18, 0x01	; 1
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	90 40       	sbci	r25, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <Apl_mainIdle_EvJob+0x36>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <Apl_mainIdle_EvJob+0x40>
 39c:	00 00       	nop
	_delay_ms(1000);
	
	++Apl_Counter;
 39e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Apl_Counter>
 3a2:	8f 5f       	subi	r24, 0xFF	; 255
 3a4:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Apl_Counter>
	
	if (3u == Apl_Counter) {
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	41 f4       	brne	.+16     	; 0x3c0 <Apl_mainIdle_EvJob+0x64>
		ControllerUnit->flag = ARG_TRUE;
 3b0:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 3b4:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	84 83       	std	Z+4, r24	; 0x04
		Apl_Counter = 0;
 3bc:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <Apl_Counter>
 3c0:	08 95       	ret

000003c2 <Apl_mainIdle_entry>:
	return;
}


void Apl_mainIdle_entry(uint16 currentState, void* para)
{
 3c2:	08 95       	ret

000003c4 <Apl_mainIdle_exit>:
	return;
}

void Apl_mainIdle_exit(uint16 currentState, void* para)
{
 3c4:	08 95       	ret

000003c6 <Apl_mainTask>:
#include <Apl_TaskListMain.h>
#include "Apl_Public_Variable.h"

void Apl_mainTask(void) {
	
	Apl_gpioChangeState(Apl_gpioCurrentSts, NULL);
 3c6:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <Apl_gpioCurrentSts>
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	bd de       	rcall	.-646    	; 0x14c <Apl_gpioChangeState>
	
	if (ARG_TRUE == ControllerUnit->flag) {
 3d2:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 3d6:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 3da:	84 81       	ldd	r24, Z+4	; 0x04
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	49 f4       	brne	.+18     	; 0x3f2 <Apl_mainTask+0x2c>
		Apl_setEvt(APL_EXECUTE_EVENT_GOSTRAIGHT, NULL);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	f6 de       	rcall	.-532    	; 0x1d4 <Apl_setEvt>
		ControllerUnit->flag = ARG_FALSE;
 3e8:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <ControllerUnit>
 3ec:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <ControllerUnit+0x1>
 3f0:	14 82       	std	Z+4, r1	; 0x04
	}
	
	Apl_setEvt(APL_EXECUTE_EVENT_COM, NULL);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	86 e0       	ldi	r24, 0x06	; 6
 3f8:	ed ce       	rjmp	.-550    	; 0x1d4 <Apl_setEvt>
 3fa:	08 95       	ret

000003fc <Apl_mainGoLeftWait_EvEnd>:
 */ 

#include "Apl_goLeftWait.h"

void Apl_mainGoLeftWait_EvEnd(uint16 currentState, void* para)
{
 3fc:	08 95       	ret

000003fe <Apl_mainGoLeftWait_EvJob>:
	return;
}

void Apl_mainGoLeftWait_EvJob(uint16 currentState, void* para)
{
 3fe:	08 95       	ret

00000400 <Apl_mainGoLeftWait_entry>:
	return;
}

void Apl_mainGoLeftWait_entry(uint16 currentState, void* para)
{
 400:	08 95       	ret

00000402 <Apl_mainGoLeftWait_exit>:
	return;
}

void Apl_mainGoLeftWait_exit(uint16 currentState, void* para)
{
 402:	08 95       	ret

00000404 <Apl_mainGoStraightWait_EvEnd>:
#include "Apl_goStraightWait.h"
#include "Apl_Public_Variable.h"

void Apl_mainGoStraightWait_EvEnd(uint16 currentState, void* para)
{
	if (E_OK == Apl_FlagCom) {
 404:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <Apl_FlagCom>
 408:	81 11       	cpse	r24, r1
 40a:	08 c0       	rjmp	.+16     	; 0x41c <Apl_mainGoStraightWait_EvEnd+0x18>
		Apl_gpioChangeState(APL_TASKLIST_IDLE, NULL);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	9b de       	rcall	.-714    	; 0x14c <Apl_gpioChangeState>
		Apl_FlagCom = E_NOTOK;
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <Apl_FlagCom>
 41c:	08 95       	ret

0000041e <Apl_mainGoStraightWait_EvJob>:
	return;
}

void Apl_mainGoStraightWait_EvJob(uint16 currentState, void* para)
{
	clr_LCD();
 41e:	cc d0       	rcall	.+408    	; 0x5b8 <clr_LCD>
	move_LCD(0,0);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	a9 d0       	rcall	.+338    	; 0x578 <move_LCD>
	printf_LCD("State GO STRAIGHT");
 426:	83 e5       	ldi	r24, 0x53	; 83
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	9f 93       	push	r25
 42c:	8f 93       	push	r24
 42e:	e3 d0       	rcall	.+454    	; 0x5f6 <printf_LCD>

	PORTE |= (1<<PE5);
 430:	83 b1       	in	r24, 0x03	; 3
 432:	80 62       	ori	r24, 0x20	; 32
 434:	83 b9       	out	0x03, r24	; 3
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	8f e7       	ldi	r24, 0x7F	; 127
 43a:	94 e0       	ldi	r25, 0x04	; 4
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <Apl_mainGoStraightWait_EvJob+0x1e>
 444:	00 c0       	rjmp	.+0      	; 0x446 <Apl_mainGoStraightWait_EvJob+0x28>
 446:	00 00       	nop
	_delay_ms(200);
	PORTE &= ~(1<<PE5);
 448:	83 b1       	in	r24, 0x03	; 3
 44a:	8f 7d       	andi	r24, 0xDF	; 223
 44c:	83 b9       	out	0x03, r24	; 3
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	8f e7       	ldi	r24, 0x7F	; 127
 452:	94 e0       	ldi	r25, 0x04	; 4
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <Apl_mainGoStraightWait_EvJob+0x36>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <Apl_mainGoStraightWait_EvJob+0x40>
 45e:	00 00       	nop
	_delay_ms(200);
	
	++Apl_Counter;
 460:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <Apl_Counter>
 464:	8f 5f       	subi	r24, 0xFF	; 255
 466:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <Apl_Counter>
	
	if (10u == Apl_Counter) {
 46a:	0f 90       	pop	r0
 46c:	0f 90       	pop	r0
 46e:	8a 30       	cpi	r24, 0x0A	; 10
 470:	21 f4       	brne	.+8      	; 0x47a <Apl_mainGoStraightWait_EvJob+0x5c>
		Apl_FlagCom = E_OK;
 472:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <Apl_FlagCom>
		Apl_Counter = 0;
 476:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <Apl_Counter>
	}
	
    Apl_setEvt(APL_EXECUTE_EVENT_WAITGOSTRAIGHT, NULL);
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	a9 ce       	rjmp	.-686    	; 0x1d4 <Apl_setEvt>
 482:	08 95       	ret

00000484 <Apl_mainGoStraightWait_entry>:
	
	return;
}

void Apl_mainGoStraightWait_entry(uint16 currentState, void* para)
{
 484:	08 95       	ret

00000486 <Apl_mainGoStraightWait_exit>:
	return;
}

void Apl_mainGoStraightWait_exit(uint16 currentState, void* para)
{
 486:	08 95       	ret

00000488 <Read2Nib>:
  #ifdef LCD8BIT
  Write8Bit(0x02);
  wait_LCD();
  #else
  Write2Nib(0x02);
  wait_LCD();
 488:	8b b3       	in	r24, 0x1b	; 27
 48a:	80 6f       	ori	r24, 0xF0	; 240
 48c:	8b bb       	out	0x1b, r24	; 27
 48e:	8a b3       	in	r24, 0x1a	; 26
 490:	8f 70       	andi	r24, 0x0F	; 15
 492:	8a bb       	out	0x1a, r24	; 26
 494:	8b b3       	in	r24, 0x1b	; 27
 496:	84 60       	ori	r24, 0x04	; 4
 498:	8b bb       	out	0x1b, r24	; 27
 49a:	8b b3       	in	r24, 0x1b	; 27
 49c:	84 60       	ori	r24, 0x04	; 4
 49e:	8b bb       	out	0x1b, r24	; 27
 4a0:	99 b3       	in	r25, 0x19	; 25
 4a2:	90 7f       	andi	r25, 0xF0	; 240
 4a4:	8b b3       	in	r24, 0x1b	; 27
 4a6:	8b 7f       	andi	r24, 0xFB	; 251
 4a8:	8b bb       	out	0x1b, r24	; 27
 4aa:	8b b3       	in	r24, 0x1b	; 27
 4ac:	84 60       	ori	r24, 0x04	; 4
 4ae:	8b bb       	out	0x1b, r24	; 27
 4b0:	8b b3       	in	r24, 0x1b	; 27
 4b2:	84 60       	ori	r24, 0x04	; 4
 4b4:	8b bb       	out	0x1b, r24	; 27
 4b6:	89 b3       	in	r24, 0x19	; 25
 4b8:	2b b3       	in	r18, 0x1b	; 27
 4ba:	2b 7f       	andi	r18, 0xFB	; 251
 4bc:	2b bb       	out	0x1b, r18	; 27
 4be:	82 95       	swap	r24
 4c0:	8f 70       	andi	r24, 0x0F	; 15
 4c2:	89 2b       	or	r24, r25
 4c4:	08 95       	ret

000004c6 <Write2Nib>:
 4c6:	2b b3       	in	r18, 0x1b	; 27
 4c8:	2f 70       	andi	r18, 0x0F	; 15
 4ca:	38 2f       	mov	r19, r24
 4cc:	30 7f       	andi	r19, 0xF0	; 240
 4ce:	40 e1       	ldi	r20, 0x10	; 16
 4d0:	84 9f       	mul	r24, r20
 4d2:	c0 01       	movw	r24, r0
 4d4:	11 24       	eor	r1, r1
 4d6:	92 2f       	mov	r25, r18
 4d8:	93 2b       	or	r25, r19
 4da:	9b bb       	out	0x1b, r25	; 27
 4dc:	9b b3       	in	r25, 0x1b	; 27
 4de:	94 60       	ori	r25, 0x04	; 4
 4e0:	9b bb       	out	0x1b, r25	; 27
 4e2:	9b b3       	in	r25, 0x1b	; 27
 4e4:	9b 7f       	andi	r25, 0xFB	; 251
 4e6:	9b bb       	out	0x1b, r25	; 27
 4e8:	82 2b       	or	r24, r18
 4ea:	8b bb       	out	0x1b, r24	; 27
 4ec:	8b b3       	in	r24, 0x1b	; 27
 4ee:	84 60       	ori	r24, 0x04	; 4
 4f0:	8b bb       	out	0x1b, r24	; 27
 4f2:	8b b3       	in	r24, 0x1b	; 27
 4f4:	8b 7f       	andi	r24, 0xFB	; 251
 4f6:	8b bb       	out	0x1b, r24	; 27
 4f8:	08 95       	ret

000004fa <wait_LCD>:
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	1f 92       	push	r1
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	8b b3       	in	r24, 0x1b	; 27
 506:	8e 7f       	andi	r24, 0xFE	; 254
 508:	8b bb       	out	0x1b, r24	; 27
 50a:	8b b3       	in	r24, 0x1b	; 27
 50c:	82 60       	ori	r24, 0x02	; 2
 50e:	8b bb       	out	0x1b, r24	; 27
 510:	bb df       	rcall	.-138    	; 0x488 <Read2Nib>
 512:	89 83       	std	Y+1, r24	; 0x01
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	88 23       	and	r24, r24
 518:	ac f3       	brlt	.-22     	; 0x504 <wait_LCD+0xa>
 51a:	8b b3       	in	r24, 0x1b	; 27
 51c:	8d 7f       	andi	r24, 0xFD	; 253
 51e:	8b bb       	out	0x1b, r24	; 27
 520:	8f ef       	ldi	r24, 0xFF	; 255
 522:	8a bb       	out	0x1a, r24	; 26
 524:	0f 90       	pop	r0
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <init_LCD>:
 52c:	8f ef       	ldi	r24, 0xFF	; 255
 52e:	8a bb       	out	0x1a, r24	; 26
 530:	8a bb       	out	0x1a, r24	; 26
 532:	8b b3       	in	r24, 0x1b	; 27
 534:	8e 7f       	andi	r24, 0xFE	; 254
 536:	8b bb       	out	0x1b, r24	; 27
 538:	8b b3       	in	r24, 0x1b	; 27
 53a:	8d 7f       	andi	r24, 0xFD	; 253
 53c:	8b bb       	out	0x1b, r24	; 27
 53e:	8b b3       	in	r24, 0x1b	; 27
 540:	8b 7f       	andi	r24, 0xFB	; 251
 542:	8b bb       	out	0x1b, r24	; 27
 544:	8b b3       	in	r24, 0x1b	; 27
 546:	84 60       	ori	r24, 0x04	; 4
 548:	8b bb       	out	0x1b, r24	; 27
 54a:	8b b3       	in	r24, 0x1b	; 27
 54c:	80 62       	ori	r24, 0x20	; 32
 54e:	8b bb       	out	0x1b, r24	; 27
 550:	8b b3       	in	r24, 0x1b	; 27
 552:	8b 7f       	andi	r24, 0xFB	; 251
 554:	8b bb       	out	0x1b, r24	; 27
 556:	d1 df       	rcall	.-94     	; 0x4fa <wait_LCD>
 558:	88 e2       	ldi	r24, 0x28	; 40
 55a:	b5 df       	rcall	.-150    	; 0x4c6 <Write2Nib>
 55c:	ce df       	rcall	.-100    	; 0x4fa <wait_LCD>
 55e:	8b b3       	in	r24, 0x1b	; 27
 560:	8e 7f       	andi	r24, 0xFE	; 254
 562:	8b bb       	out	0x1b, r24	; 27
 564:	8e e0       	ldi	r24, 0x0E	; 14
 566:	af df       	rcall	.-162    	; 0x4c6 <Write2Nib>
 568:	c8 df       	rcall	.-112    	; 0x4fa <wait_LCD>
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	8e 7f       	andi	r24, 0xFE	; 254
 56e:	8b bb       	out	0x1b, r24	; 27
 570:	86 e0       	ldi	r24, 0x06	; 6
 572:	a9 df       	rcall	.-174    	; 0x4c6 <Write2Nib>
 574:	c2 cf       	rjmp	.-124    	; 0x4fa <wait_LCD>
 576:	08 95       	ret

00000578 <move_LCD>:
 */
void move_LCD(uint8_t y,uint8_t x)
{
  uint8_t Ad;
  
  if (x == 0) {
 578:	66 23       	and	r22, r22
 57a:	19 f0       	breq	.+6      	; 0x582 <move_LCD+0xa>
	  x = 1;
  } else if (x > 16) {
 57c:	61 31       	cpi	r22, 0x11	; 17
 57e:	18 f4       	brcc	.+6      	; 0x586 <move_LCD+0xe>
 580:	03 c0       	rjmp	.+6      	; 0x588 <move_LCD+0x10>
void move_LCD(uint8_t y,uint8_t x)
{
  uint8_t Ad;
  
  if (x == 0) {
	  x = 1;
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	01 c0       	rjmp	.+2      	; 0x588 <move_LCD+0x10>
  } else if (x > 16) {
	  x = 16;
 586:	60 e1       	ldi	r22, 0x10	; 16
  } else {
	  /* Do nothing */
  }
  
  if (y == 0) {
 588:	88 23       	and	r24, r24
 58a:	19 f0       	breq	.+6      	; 0x592 <move_LCD+0x1a>
	  y = 1;
  } else if (y > 2) {
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	18 f4       	brcc	.+6      	; 0x596 <move_LCD+0x1e>
 590:	03 c0       	rjmp	.+6      	; 0x598 <move_LCD+0x20>
  } else {
	  /* Do nothing */
  }
  
  if (y == 0) {
	  y = 1;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	01 c0       	rjmp	.+2      	; 0x598 <move_LCD+0x20>
  } else if (y > 2) {
	  y = 2;
 596:	82 e0       	ldi	r24, 0x02	; 2
  } else {
	  /* Do nothing */
  }
  
  Ad = 64*(y-1)+(x-1)+0x80; //
 598:	28 2f       	mov	r18, r24
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	31 09       	sbc	r19, r1
 5a0:	86 2f       	mov	r24, r22
 5a2:	90 e4       	ldi	r25, 0x40	; 64
 5a4:	29 9f       	mul	r18, r25
 5a6:	80 0d       	add	r24, r0
 5a8:	11 24       	eor	r1, r1
  cbi(CTRL,RS); // the following data is COMMAND
 5aa:	9b b3       	in	r25, 0x1b	; 27
 5ac:	9e 7f       	andi	r25, 0xFE	; 254
 5ae:	9b bb       	out	0x1b, r25	; 27
  #ifdef LCD8BIT
  Write8Bit(Ad);
  wait_LCD();
  #else
  Write2Nib(Ad);
 5b0:	81 58       	subi	r24, 0x81	; 129
 5b2:	89 df       	rcall	.-238    	; 0x4c6 <Write2Nib>
  wait_LCD();
 5b4:	a2 cf       	rjmp	.-188    	; 0x4fa <wait_LCD>
 5b6:	08 95       	ret

000005b8 <clr_LCD>:
 5b8:	8b b3       	in	r24, 0x1b	; 27
/*
 *  Clear the LCD
 */
void clr_LCD(void)
{
  cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 5ba:	8e 7f       	andi	r24, 0xFE	; 254
 5bc:	8b bb       	out	0x1b, r24	; 27
  #ifdef LCD8BIT
  Write8Bit(0x01);
  wait_LCD();
  #else
  Write2Nib(0x01);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	82 df       	rcall	.-252    	; 0x4c6 <Write2Nib>
  wait_LCD();
 5c2:	9b cf       	rjmp	.-202    	; 0x4fa <wait_LCD>
 5c4:	08 95       	ret

000005c6 <putChar_LCD>:
 5c6:	9b b3       	in	r25, 0x1b	; 27
/*
 *  Put char on the LCD
 */
void putChar_LCD(uint8_t chr)
{
  sbi(CTRL,RS); //this is a normal DATA
 5c8:	91 60       	ori	r25, 0x01	; 1
 5ca:	9b bb       	out	0x1b, r25	; 27
  #ifdef LCD8BIT
  Write8Bit(chr);
  wait_LCD();
  #else
  Write2Nib(chr);
 5cc:	7c df       	rcall	.-264    	; 0x4c6 <Write2Nib>
  wait_LCD();
 5ce:	95 cf       	rjmp	.-214    	; 0x4fa <wait_LCD>
 5d0:	08 95       	ret

000005d2 <putStr_LCD>:
 5d2:	0f 93       	push	r16

/*
 *  Put string on the LCD
 */
void putStr_LCD(const char* str)
{
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	8c 01       	movw	r16, r24
  unsigned char i;
  for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);
 5da:	c0 e0       	ldi	r28, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <putStr_LCD+0x10>
 5de:	f3 df       	rcall	.-26     	; 0x5c6 <putChar_LCD>
 5e0:	cf 5f       	subi	r28, 0xFF	; 255
 5e2:	f8 01       	movw	r30, r16
 5e4:	ec 0f       	add	r30, r28
 5e6:	f1 1d       	adc	r31, r1
 5e8:	80 81       	ld	r24, Z
 5ea:	81 11       	cpse	r24, r1
 5ec:	f8 cf       	rjmp	.-16     	; 0x5de <putStr_LCD+0xc>
}
 5ee:	cf 91       	pop	r28
 5f0:	1f 91       	pop	r17
 5f2:	0f 91       	pop	r16
 5f4:	08 95       	ret

000005f6 <printf_LCD>:

/*
 *  Print standard C printf format string on the LCD
 */
void printf_LCD(const char *format, ...)
{
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	9e 01       	movw	r18, r28
 600:	2b 5f       	subi	r18, 0xFB	; 251
 602:	3f 4f       	sbci	r19, 0xFF	; 255
 604:	f9 01       	movw	r30, r18
 606:	41 91       	ld	r20, Z+
 608:	51 91       	ld	r21, Z+
 60a:	9f 01       	movw	r18, r30
  static char lcd_buffer[LCD_NO_COLS + 1];
  va_list args;

  va_start(args, format);
  vsnprintf(lcd_buffer, LCD_NO_COLS + 1, format, args);
 60c:	61 e1       	ldi	r22, 0x11	; 17
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	86 e6       	ldi	r24, 0x66	; 102
 612:	91 e0       	ldi	r25, 0x01	; 1
 614:	a5 d0       	rcall	.+330    	; 0x760 <vsnprintf>
  va_end(args);

  putStr_LCD(lcd_buffer);
 616:	86 e6       	ldi	r24, 0x66	; 102
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	db df       	rcall	.-74     	; 0x5d2 <putStr_LCD>
}
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <IO_Init>:
static void IO_Init();
//static void LCD_Init(LiquidCrystalDevice_t* module);
static void f_uartInit(void);

void IO_Init(){
	DDRE = 0xFF;
 622:	9f ef       	ldi	r25, 0xFF	; 255
 624:	92 b9       	out	0x02, r25	; 2
	DDRD |= (1<<PD4)|(1<<PD5);
 626:	81 b3       	in	r24, 0x11	; 17
 628:	80 63       	ori	r24, 0x30	; 48
 62a:	81 bb       	out	0x11, r24	; 17
	
	PORTE = 0x00;
 62c:	13 b8       	out	0x03, r1	; 3
	PORTD &= ~((1<<PD4)|(1<<PD5));
 62e:	82 b3       	in	r24, 0x12	; 18
 630:	8f 7c       	andi	r24, 0xCF	; 207
 632:	82 bb       	out	0x12, r24	; 18
	
	DDRB = 0xFF;
 634:	97 bb       	out	0x17, r25	; 23
	PORTB = 0x00;
 636:	18 ba       	out	0x18, r1	; 24
 638:	08 95       	ret

0000063a <f_uartInit>:
// 	*module = lq_init(0x27, 16, 2, LCD_5x8DOTS);
// 	lq_turnOnBacklight(module);
// }

void f_uartInit(void) {
	UART1_Init(9600);
 63a:	40 e8       	ldi	r20, 0x80	; 128
 63c:	55 e2       	ldi	r21, 0x25	; 37
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	70 e0       	ldi	r23, 0x00	; 0
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	4b c0       	rjmp	.+150    	; 0x6dc <UART_Init>
 646:	08 95       	ret

00000648 <BSW_driverInit>:
	return;
}

void BSW_driverInit(void)
{
	IO_Init();
 648:	ec df       	rcall	.-40     	; 0x622 <IO_Init>
	//LCD_Init(&device);
	init_LCD();
 64a:	70 df       	rcall	.-288    	; 0x52c <init_LCD>
	f_setchanel(0u);
 64c:	80 e0       	ldi	r24, 0x00	; 0
	f_adc_init();
 64e:	06 d0       	rcall	.+12     	; 0x65c <f_setchanel>
 650:	06 d0       	rcall	.+12     	; 0x65e <f_adc_init>
	f_uartInit();
 652:	f3 cf       	rjmp	.-26     	; 0x63a <f_uartInit>
 654:	08 95       	ret

00000656 <main>:
#include <Apl_TaskListMain.h>
#include <Apl_Init.h>

int main(void) {

	Apl_Init();
 656:	75 dd       	rcall	.-1302   	; 0x142 <Apl_Init>
	
	while(1) {
		Apl_mainTask();
 658:	b6 de       	rcall	.-660    	; 0x3c6 <Apl_mainTask>
 65a:	fe cf       	rjmp	.-4      	; 0x658 <main+0x2>

0000065c <f_setchanel>:
  *         
  * @param
  * @param
  * @retval
  */
void f_setchanel(uint8 chanel) {
 65c:	08 95       	ret

0000065e <f_adc_init>:
  * @param
  * @retval
  */
void f_adc_init(void)
{
	ADMUX |= ((1 << REFS0) | chanel);
 65e:	87 b1       	in	r24, 0x07	; 7
 660:	80 64       	ori	r24, 0x40	; 64
 662:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS0);
 664:	86 b1       	in	r24, 0x06	; 6
 666:	85 68       	ori	r24, 0x85	; 133
 668:	86 b9       	out	0x06, r24	; 6
 66a:	08 95       	ret

0000066c <UART_SetBaudRate>:



}
void UART_SetBaudRate(uint8 var_uartChannel_u8, uint32 var_baudRate_u32)
{
 66c:	cf 93       	push	r28
 66e:	c8 2f       	mov	r28, r24
    uint16 RegValue;
    if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
 670:	db 01       	movw	r26, r22
 672:	ca 01       	movw	r24, r20
 674:	80 56       	subi	r24, 0x60	; 96
 676:	99 40       	sbci	r25, 0x09	; 9
 678:	a1 09       	sbc	r26, r1
 67a:	b1 09       	sbc	r27, r1
 67c:	81 3a       	cpi	r24, 0xA1	; 161
 67e:	98 4b       	sbci	r25, 0xB8	; 184
 680:	a1 40       	sbci	r26, 0x01	; 1
 682:	b1 05       	cpc	r27, r1
 684:	d0 f4       	brcc	.+52     	; 0x6ba <UART_SetBaudRate+0x4e>
    {
        RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
 686:	44 0f       	add	r20, r20
 688:	55 1f       	adc	r21, r21
 68a:	66 1f       	adc	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	44 0f       	add	r20, r20
 690:	55 1f       	adc	r21, r21
 692:	66 1f       	adc	r22, r22
 694:	77 1f       	adc	r23, r23
 696:	9a 01       	movw	r18, r20
 698:	ab 01       	movw	r20, r22
 69a:	22 0f       	add	r18, r18
 69c:	33 1f       	adc	r19, r19
 69e:	44 1f       	adc	r20, r20
 6a0:	55 1f       	adc	r21, r21
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	44 1f       	adc	r20, r20
 6a8:	55 1f       	adc	r21, r21
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	70 e8       	ldi	r23, 0x80	; 128
 6ae:	80 e7       	ldi	r24, 0x70	; 112
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	2b d0       	rcall	.+86     	; 0x70a <__udivmodsi4>
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	31 09       	sbc	r19, r1
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <UART_SetBaudRate+0x52>
    }
    else
    {
        RegValue = M_GetBaudRateGeneratorValue(9600);
 6ba:	26 e4       	ldi	r18, 0x46	; 70
 6bc:	31 e0       	ldi	r19, 0x01	; 1
    }
    switch(var_uartChannel_u8)
 6be:	cc 23       	and	r28, r28
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <UART_SetBaudRate+0x5c>
 6c2:	c1 30       	cpi	r28, 0x01	; 1
 6c4:	29 f0       	breq	.+10     	; 0x6d0 <UART_SetBaudRate+0x64>
 6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <UART_SetBaudRate+0x6c>
    {
    case 0:
        UBRR0L = util_ExtractByte0to8(RegValue);
 6c8:	29 b9       	out	0x09, r18	; 9
        UBRR0H = util_ExtractByte8to16(RegValue);
 6ca:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
        break;
 6ce:	04 c0       	rjmp	.+8      	; 0x6d8 <UART_SetBaudRate+0x6c>
    case 1:
        UBRR1L = util_ExtractByte0to8(RegValue);
 6d0:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
        UBRR1H = util_ExtractByte8to16(RegValue);
 6d4:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        break;
    }  



}
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <UART_Init>:
#define C_MaxUartChannels_U8 2u
#define C_UartOne_U8         1u

void UART_Init(uint8 var_uartChannel_u8, uint32 var_baudRate_u32)
{    
    switch(var_uartChannel_u8)
 6dc:	88 23       	and	r24, r24
 6de:	19 f0       	breq	.+6      	; 0x6e6 <UART_Init+0xa>
 6e0:	81 30       	cpi	r24, 0x01	; 1
 6e2:	49 f0       	breq	.+18     	; 0x6f6 <UART_Init+0x1a>
 6e4:	08 95       	ret
    {
    case 0:
	
        UCSR0B= (1<<RXEN) | (1<<TXEN);                  
 6e6:	98 e1       	ldi	r25, 0x18	; 24
 6e8:	9a b9       	out	0x0a, r25	; 10
        UCSR0C = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0); 
 6ea:	96 e0       	ldi	r25, 0x06	; 6
 6ec:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
        UCSR0A= 0x00;                                   
 6f0:	1b b8       	out	0x0b, r1	; 11
        UART_SetBaudRate(var_uartChannel_u8,var_baudRate_u32);
 6f2:	bc cf       	rjmp	.-136    	; 0x66c <UART_SetBaudRate>
        break;
 6f4:	08 95       	ret


    case 1:
	    
        UCSR1B= (1<<RXEN) | (1<<TXEN);                 
 6f6:	98 e1       	ldi	r25, 0x18	; 24
 6f8:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
        UCSR1C= (1<<UCSZ1) | (1<<UCSZ0);   
 6fc:	96 e0       	ldi	r25, 0x06	; 6
 6fe:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
        UCSR1A= 0x00;                                   
 702:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
        UART_SetBaudRate(var_uartChannel_u8,var_baudRate_u32);
 706:	b2 cf       	rjmp	.-156    	; 0x66c <UART_SetBaudRate>
 708:	08 95       	ret

0000070a <__udivmodsi4>:
 70a:	a1 e2       	ldi	r26, 0x21	; 33
 70c:	1a 2e       	mov	r1, r26
 70e:	aa 1b       	sub	r26, r26
 710:	bb 1b       	sub	r27, r27
 712:	fd 01       	movw	r30, r26
 714:	0d c0       	rjmp	.+26     	; 0x730 <__udivmodsi4_ep>

00000716 <__udivmodsi4_loop>:
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	ee 1f       	adc	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	a2 17       	cp	r26, r18
 720:	b3 07       	cpc	r27, r19
 722:	e4 07       	cpc	r30, r20
 724:	f5 07       	cpc	r31, r21
 726:	20 f0       	brcs	.+8      	; 0x730 <__udivmodsi4_ep>
 728:	a2 1b       	sub	r26, r18
 72a:	b3 0b       	sbc	r27, r19
 72c:	e4 0b       	sbc	r30, r20
 72e:	f5 0b       	sbc	r31, r21

00000730 <__udivmodsi4_ep>:
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	1a 94       	dec	r1
 73a:	69 f7       	brne	.-38     	; 0x716 <__udivmodsi4_loop>
 73c:	60 95       	com	r22
 73e:	70 95       	com	r23
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	9b 01       	movw	r18, r22
 746:	ac 01       	movw	r20, r24
 748:	bd 01       	movw	r22, r26
 74a:	cf 01       	movw	r24, r30
 74c:	08 95       	ret

0000074e <__tablejump2__>:
 74e:	ee 0f       	add	r30, r30
 750:	ff 1f       	adc	r31, r31
 752:	00 24       	eor	r0, r0
 754:	00 1c       	adc	r0, r0
 756:	0b be       	out	0x3b, r0	; 59
 758:	07 90       	elpm	r0, Z+
 75a:	f6 91       	elpm	r31, Z
 75c:	e0 2d       	mov	r30, r0
 75e:	09 94       	ijmp

00000760 <vsnprintf>:
 760:	0f 93       	push	r16
 762:	1f 93       	push	r17
 764:	cf 93       	push	r28
 766:	df 93       	push	r29
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
 76c:	2e 97       	sbiw	r28, 0x0e	; 14
 76e:	0f b6       	in	r0, 0x3f	; 63
 770:	f8 94       	cli
 772:	de bf       	out	0x3e, r29	; 62
 774:	0f be       	out	0x3f, r0	; 63
 776:	cd bf       	out	0x3d, r28	; 61
 778:	8c 01       	movw	r16, r24
 77a:	fa 01       	movw	r30, r20
 77c:	86 e0       	ldi	r24, 0x06	; 6
 77e:	8c 83       	std	Y+4, r24	; 0x04
 780:	1a 83       	std	Y+2, r17	; 0x02
 782:	09 83       	std	Y+1, r16	; 0x01
 784:	77 ff       	sbrs	r23, 7
 786:	02 c0       	rjmp	.+4      	; 0x78c <vsnprintf+0x2c>
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	70 e8       	ldi	r23, 0x80	; 128
 78c:	cb 01       	movw	r24, r22
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	9e 83       	std	Y+6, r25	; 0x06
 792:	8d 83       	std	Y+5, r24	; 0x05
 794:	a9 01       	movw	r20, r18
 796:	bf 01       	movw	r22, r30
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	19 d0       	rcall	.+50     	; 0x7d0 <vfprintf>
 79e:	4d 81       	ldd	r20, Y+5	; 0x05
 7a0:	5e 81       	ldd	r21, Y+6	; 0x06
 7a2:	57 fd       	sbrc	r21, 7
 7a4:	0a c0       	rjmp	.+20     	; 0x7ba <vsnprintf+0x5a>
 7a6:	2f 81       	ldd	r18, Y+7	; 0x07
 7a8:	38 85       	ldd	r19, Y+8	; 0x08
 7aa:	42 17       	cp	r20, r18
 7ac:	53 07       	cpc	r21, r19
 7ae:	0c f4       	brge	.+2      	; 0x7b2 <vsnprintf+0x52>
 7b0:	9a 01       	movw	r18, r20
 7b2:	f8 01       	movw	r30, r16
 7b4:	e2 0f       	add	r30, r18
 7b6:	f3 1f       	adc	r31, r19
 7b8:	10 82       	st	Z, r1
 7ba:	2e 96       	adiw	r28, 0x0e	; 14
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	08 95       	ret

000007d0 <vfprintf>:
 7d0:	2f 92       	push	r2
 7d2:	3f 92       	push	r3
 7d4:	4f 92       	push	r4
 7d6:	5f 92       	push	r5
 7d8:	6f 92       	push	r6
 7da:	7f 92       	push	r7
 7dc:	8f 92       	push	r8
 7de:	9f 92       	push	r9
 7e0:	af 92       	push	r10
 7e2:	bf 92       	push	r11
 7e4:	cf 92       	push	r12
 7e6:	df 92       	push	r13
 7e8:	ef 92       	push	r14
 7ea:	ff 92       	push	r15
 7ec:	0f 93       	push	r16
 7ee:	1f 93       	push	r17
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	cd b7       	in	r28, 0x3d	; 61
 7f6:	de b7       	in	r29, 0x3e	; 62
 7f8:	2b 97       	sbiw	r28, 0x0b	; 11
 7fa:	0f b6       	in	r0, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	de bf       	out	0x3e, r29	; 62
 800:	0f be       	out	0x3f, r0	; 63
 802:	cd bf       	out	0x3d, r28	; 61
 804:	6c 01       	movw	r12, r24
 806:	7b 01       	movw	r14, r22
 808:	8a 01       	movw	r16, r20
 80a:	fc 01       	movw	r30, r24
 80c:	17 82       	std	Z+7, r1	; 0x07
 80e:	16 82       	std	Z+6, r1	; 0x06
 810:	83 81       	ldd	r24, Z+3	; 0x03
 812:	81 ff       	sbrs	r24, 1
 814:	bf c1       	rjmp	.+894    	; 0xb94 <vfprintf+0x3c4>
 816:	ce 01       	movw	r24, r28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	3c 01       	movw	r6, r24
 81c:	f6 01       	movw	r30, r12
 81e:	93 81       	ldd	r25, Z+3	; 0x03
 820:	f7 01       	movw	r30, r14
 822:	93 fd       	sbrc	r25, 3
 824:	85 91       	lpm	r24, Z+
 826:	93 ff       	sbrs	r25, 3
 828:	81 91       	ld	r24, Z+
 82a:	7f 01       	movw	r14, r30
 82c:	88 23       	and	r24, r24
 82e:	09 f4       	brne	.+2      	; 0x832 <vfprintf+0x62>
 830:	ad c1       	rjmp	.+858    	; 0xb8c <vfprintf+0x3bc>
 832:	85 32       	cpi	r24, 0x25	; 37
 834:	39 f4       	brne	.+14     	; 0x844 <vfprintf+0x74>
 836:	93 fd       	sbrc	r25, 3
 838:	85 91       	lpm	r24, Z+
 83a:	93 ff       	sbrs	r25, 3
 83c:	81 91       	ld	r24, Z+
 83e:	7f 01       	movw	r14, r30
 840:	85 32       	cpi	r24, 0x25	; 37
 842:	21 f4       	brne	.+8      	; 0x84c <vfprintf+0x7c>
 844:	b6 01       	movw	r22, r12
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	d6 d1       	rcall	.+940    	; 0xbf6 <fputc>
 84a:	e8 cf       	rjmp	.-48     	; 0x81c <vfprintf+0x4c>
 84c:	91 2c       	mov	r9, r1
 84e:	21 2c       	mov	r2, r1
 850:	31 2c       	mov	r3, r1
 852:	ff e1       	ldi	r31, 0x1F	; 31
 854:	f3 15       	cp	r31, r3
 856:	d8 f0       	brcs	.+54     	; 0x88e <vfprintf+0xbe>
 858:	8b 32       	cpi	r24, 0x2B	; 43
 85a:	79 f0       	breq	.+30     	; 0x87a <vfprintf+0xaa>
 85c:	38 f4       	brcc	.+14     	; 0x86c <vfprintf+0x9c>
 85e:	80 32       	cpi	r24, 0x20	; 32
 860:	79 f0       	breq	.+30     	; 0x880 <vfprintf+0xb0>
 862:	83 32       	cpi	r24, 0x23	; 35
 864:	a1 f4       	brne	.+40     	; 0x88e <vfprintf+0xbe>
 866:	23 2d       	mov	r18, r3
 868:	20 61       	ori	r18, 0x10	; 16
 86a:	1d c0       	rjmp	.+58     	; 0x8a6 <vfprintf+0xd6>
 86c:	8d 32       	cpi	r24, 0x2D	; 45
 86e:	61 f0       	breq	.+24     	; 0x888 <vfprintf+0xb8>
 870:	80 33       	cpi	r24, 0x30	; 48
 872:	69 f4       	brne	.+26     	; 0x88e <vfprintf+0xbe>
 874:	23 2d       	mov	r18, r3
 876:	21 60       	ori	r18, 0x01	; 1
 878:	16 c0       	rjmp	.+44     	; 0x8a6 <vfprintf+0xd6>
 87a:	83 2d       	mov	r24, r3
 87c:	82 60       	ori	r24, 0x02	; 2
 87e:	38 2e       	mov	r3, r24
 880:	e3 2d       	mov	r30, r3
 882:	e4 60       	ori	r30, 0x04	; 4
 884:	3e 2e       	mov	r3, r30
 886:	2a c0       	rjmp	.+84     	; 0x8dc <vfprintf+0x10c>
 888:	f3 2d       	mov	r31, r3
 88a:	f8 60       	ori	r31, 0x08	; 8
 88c:	1d c0       	rjmp	.+58     	; 0x8c8 <vfprintf+0xf8>
 88e:	37 fc       	sbrc	r3, 7
 890:	2d c0       	rjmp	.+90     	; 0x8ec <vfprintf+0x11c>
 892:	20 ed       	ldi	r18, 0xD0	; 208
 894:	28 0f       	add	r18, r24
 896:	2a 30       	cpi	r18, 0x0A	; 10
 898:	40 f0       	brcs	.+16     	; 0x8aa <vfprintf+0xda>
 89a:	8e 32       	cpi	r24, 0x2E	; 46
 89c:	b9 f4       	brne	.+46     	; 0x8cc <vfprintf+0xfc>
 89e:	36 fc       	sbrc	r3, 6
 8a0:	75 c1       	rjmp	.+746    	; 0xb8c <vfprintf+0x3bc>
 8a2:	23 2d       	mov	r18, r3
 8a4:	20 64       	ori	r18, 0x40	; 64
 8a6:	32 2e       	mov	r3, r18
 8a8:	19 c0       	rjmp	.+50     	; 0x8dc <vfprintf+0x10c>
 8aa:	36 fe       	sbrs	r3, 6
 8ac:	06 c0       	rjmp	.+12     	; 0x8ba <vfprintf+0xea>
 8ae:	8a e0       	ldi	r24, 0x0A	; 10
 8b0:	98 9e       	mul	r9, r24
 8b2:	20 0d       	add	r18, r0
 8b4:	11 24       	eor	r1, r1
 8b6:	92 2e       	mov	r9, r18
 8b8:	11 c0       	rjmp	.+34     	; 0x8dc <vfprintf+0x10c>
 8ba:	ea e0       	ldi	r30, 0x0A	; 10
 8bc:	2e 9e       	mul	r2, r30
 8be:	20 0d       	add	r18, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	22 2e       	mov	r2, r18
 8c4:	f3 2d       	mov	r31, r3
 8c6:	f0 62       	ori	r31, 0x20	; 32
 8c8:	3f 2e       	mov	r3, r31
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <vfprintf+0x10c>
 8cc:	8c 36       	cpi	r24, 0x6C	; 108
 8ce:	21 f4       	brne	.+8      	; 0x8d8 <vfprintf+0x108>
 8d0:	83 2d       	mov	r24, r3
 8d2:	80 68       	ori	r24, 0x80	; 128
 8d4:	38 2e       	mov	r3, r24
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x10c>
 8d8:	88 36       	cpi	r24, 0x68	; 104
 8da:	41 f4       	brne	.+16     	; 0x8ec <vfprintf+0x11c>
 8dc:	f7 01       	movw	r30, r14
 8de:	93 fd       	sbrc	r25, 3
 8e0:	85 91       	lpm	r24, Z+
 8e2:	93 ff       	sbrs	r25, 3
 8e4:	81 91       	ld	r24, Z+
 8e6:	7f 01       	movw	r14, r30
 8e8:	81 11       	cpse	r24, r1
 8ea:	b3 cf       	rjmp	.-154    	; 0x852 <vfprintf+0x82>
 8ec:	98 2f       	mov	r25, r24
 8ee:	9f 7d       	andi	r25, 0xDF	; 223
 8f0:	95 54       	subi	r25, 0x45	; 69
 8f2:	93 30       	cpi	r25, 0x03	; 3
 8f4:	28 f4       	brcc	.+10     	; 0x900 <vfprintf+0x130>
 8f6:	0c 5f       	subi	r16, 0xFC	; 252
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	9f e3       	ldi	r25, 0x3F	; 63
 8fc:	99 83       	std	Y+1, r25	; 0x01
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <vfprintf+0x14a>
 900:	83 36       	cpi	r24, 0x63	; 99
 902:	31 f0       	breq	.+12     	; 0x910 <vfprintf+0x140>
 904:	83 37       	cpi	r24, 0x73	; 115
 906:	71 f0       	breq	.+28     	; 0x924 <vfprintf+0x154>
 908:	83 35       	cpi	r24, 0x53	; 83
 90a:	09 f0       	breq	.+2      	; 0x90e <vfprintf+0x13e>
 90c:	55 c0       	rjmp	.+170    	; 0x9b8 <vfprintf+0x1e8>
 90e:	20 c0       	rjmp	.+64     	; 0x950 <vfprintf+0x180>
 910:	f8 01       	movw	r30, r16
 912:	80 81       	ld	r24, Z
 914:	89 83       	std	Y+1, r24	; 0x01
 916:	0e 5f       	subi	r16, 0xFE	; 254
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	88 24       	eor	r8, r8
 91c:	83 94       	inc	r8
 91e:	91 2c       	mov	r9, r1
 920:	53 01       	movw	r10, r6
 922:	12 c0       	rjmp	.+36     	; 0x948 <vfprintf+0x178>
 924:	28 01       	movw	r4, r16
 926:	f2 e0       	ldi	r31, 0x02	; 2
 928:	4f 0e       	add	r4, r31
 92a:	51 1c       	adc	r5, r1
 92c:	f8 01       	movw	r30, r16
 92e:	a0 80       	ld	r10, Z
 930:	b1 80       	ldd	r11, Z+1	; 0x01
 932:	36 fe       	sbrs	r3, 6
 934:	03 c0       	rjmp	.+6      	; 0x93c <vfprintf+0x16c>
 936:	69 2d       	mov	r22, r9
 938:	70 e0       	ldi	r23, 0x00	; 0
 93a:	02 c0       	rjmp	.+4      	; 0x940 <vfprintf+0x170>
 93c:	6f ef       	ldi	r22, 0xFF	; 255
 93e:	7f ef       	ldi	r23, 0xFF	; 255
 940:	c5 01       	movw	r24, r10
 942:	4e d1       	rcall	.+668    	; 0xbe0 <strnlen>
 944:	4c 01       	movw	r8, r24
 946:	82 01       	movw	r16, r4
 948:	f3 2d       	mov	r31, r3
 94a:	ff 77       	andi	r31, 0x7F	; 127
 94c:	3f 2e       	mov	r3, r31
 94e:	15 c0       	rjmp	.+42     	; 0x97a <vfprintf+0x1aa>
 950:	28 01       	movw	r4, r16
 952:	22 e0       	ldi	r18, 0x02	; 2
 954:	42 0e       	add	r4, r18
 956:	51 1c       	adc	r5, r1
 958:	f8 01       	movw	r30, r16
 95a:	a0 80       	ld	r10, Z
 95c:	b1 80       	ldd	r11, Z+1	; 0x01
 95e:	36 fe       	sbrs	r3, 6
 960:	03 c0       	rjmp	.+6      	; 0x968 <vfprintf+0x198>
 962:	69 2d       	mov	r22, r9
 964:	70 e0       	ldi	r23, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <vfprintf+0x19c>
 968:	6f ef       	ldi	r22, 0xFF	; 255
 96a:	7f ef       	ldi	r23, 0xFF	; 255
 96c:	c5 01       	movw	r24, r10
 96e:	2d d1       	rcall	.+602    	; 0xbca <strnlen_P>
 970:	4c 01       	movw	r8, r24
 972:	f3 2d       	mov	r31, r3
 974:	f0 68       	ori	r31, 0x80	; 128
 976:	3f 2e       	mov	r3, r31
 978:	82 01       	movw	r16, r4
 97a:	33 fc       	sbrc	r3, 3
 97c:	19 c0       	rjmp	.+50     	; 0x9b0 <vfprintf+0x1e0>
 97e:	82 2d       	mov	r24, r2
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	88 16       	cp	r8, r24
 984:	99 06       	cpc	r9, r25
 986:	a0 f4       	brcc	.+40     	; 0x9b0 <vfprintf+0x1e0>
 988:	b6 01       	movw	r22, r12
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	33 d1       	rcall	.+614    	; 0xbf6 <fputc>
 990:	2a 94       	dec	r2
 992:	f5 cf       	rjmp	.-22     	; 0x97e <vfprintf+0x1ae>
 994:	f5 01       	movw	r30, r10
 996:	37 fc       	sbrc	r3, 7
 998:	85 91       	lpm	r24, Z+
 99a:	37 fe       	sbrs	r3, 7
 99c:	81 91       	ld	r24, Z+
 99e:	5f 01       	movw	r10, r30
 9a0:	b6 01       	movw	r22, r12
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	28 d1       	rcall	.+592    	; 0xbf6 <fputc>
 9a6:	21 10       	cpse	r2, r1
 9a8:	2a 94       	dec	r2
 9aa:	21 e0       	ldi	r18, 0x01	; 1
 9ac:	82 1a       	sub	r8, r18
 9ae:	91 08       	sbc	r9, r1
 9b0:	81 14       	cp	r8, r1
 9b2:	91 04       	cpc	r9, r1
 9b4:	79 f7       	brne	.-34     	; 0x994 <vfprintf+0x1c4>
 9b6:	e1 c0       	rjmp	.+450    	; 0xb7a <vfprintf+0x3aa>
 9b8:	84 36       	cpi	r24, 0x64	; 100
 9ba:	11 f0       	breq	.+4      	; 0x9c0 <vfprintf+0x1f0>
 9bc:	89 36       	cpi	r24, 0x69	; 105
 9be:	39 f5       	brne	.+78     	; 0xa0e <vfprintf+0x23e>
 9c0:	f8 01       	movw	r30, r16
 9c2:	37 fe       	sbrs	r3, 7
 9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <vfprintf+0x204>
 9c6:	60 81       	ld	r22, Z
 9c8:	71 81       	ldd	r23, Z+1	; 0x01
 9ca:	82 81       	ldd	r24, Z+2	; 0x02
 9cc:	93 81       	ldd	r25, Z+3	; 0x03
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	08 c0       	rjmp	.+16     	; 0x9e4 <vfprintf+0x214>
 9d4:	60 81       	ld	r22, Z
 9d6:	71 81       	ldd	r23, Z+1	; 0x01
 9d8:	07 2e       	mov	r0, r23
 9da:	00 0c       	add	r0, r0
 9dc:	88 0b       	sbc	r24, r24
 9de:	99 0b       	sbc	r25, r25
 9e0:	0e 5f       	subi	r16, 0xFE	; 254
 9e2:	1f 4f       	sbci	r17, 0xFF	; 255
 9e4:	f3 2d       	mov	r31, r3
 9e6:	ff 76       	andi	r31, 0x6F	; 111
 9e8:	3f 2e       	mov	r3, r31
 9ea:	97 ff       	sbrs	r25, 7
 9ec:	09 c0       	rjmp	.+18     	; 0xa00 <vfprintf+0x230>
 9ee:	90 95       	com	r25
 9f0:	80 95       	com	r24
 9f2:	70 95       	com	r23
 9f4:	61 95       	neg	r22
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255
 9f8:	8f 4f       	sbci	r24, 0xFF	; 255
 9fa:	9f 4f       	sbci	r25, 0xFF	; 255
 9fc:	f0 68       	ori	r31, 0x80	; 128
 9fe:	3f 2e       	mov	r3, r31
 a00:	2a e0       	ldi	r18, 0x0A	; 10
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	a3 01       	movw	r20, r6
 a06:	33 d1       	rcall	.+614    	; 0xc6e <__ultoa_invert>
 a08:	88 2e       	mov	r8, r24
 a0a:	86 18       	sub	r8, r6
 a0c:	44 c0       	rjmp	.+136    	; 0xa96 <vfprintf+0x2c6>
 a0e:	85 37       	cpi	r24, 0x75	; 117
 a10:	31 f4       	brne	.+12     	; 0xa1e <vfprintf+0x24e>
 a12:	23 2d       	mov	r18, r3
 a14:	2f 7e       	andi	r18, 0xEF	; 239
 a16:	b2 2e       	mov	r11, r18
 a18:	2a e0       	ldi	r18, 0x0A	; 10
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	25 c0       	rjmp	.+74     	; 0xa68 <vfprintf+0x298>
 a1e:	93 2d       	mov	r25, r3
 a20:	99 7f       	andi	r25, 0xF9	; 249
 a22:	b9 2e       	mov	r11, r25
 a24:	8f 36       	cpi	r24, 0x6F	; 111
 a26:	c1 f0       	breq	.+48     	; 0xa58 <vfprintf+0x288>
 a28:	18 f4       	brcc	.+6      	; 0xa30 <vfprintf+0x260>
 a2a:	88 35       	cpi	r24, 0x58	; 88
 a2c:	79 f0       	breq	.+30     	; 0xa4c <vfprintf+0x27c>
 a2e:	ae c0       	rjmp	.+348    	; 0xb8c <vfprintf+0x3bc>
 a30:	80 37       	cpi	r24, 0x70	; 112
 a32:	19 f0       	breq	.+6      	; 0xa3a <vfprintf+0x26a>
 a34:	88 37       	cpi	r24, 0x78	; 120
 a36:	21 f0       	breq	.+8      	; 0xa40 <vfprintf+0x270>
 a38:	a9 c0       	rjmp	.+338    	; 0xb8c <vfprintf+0x3bc>
 a3a:	e9 2f       	mov	r30, r25
 a3c:	e0 61       	ori	r30, 0x10	; 16
 a3e:	be 2e       	mov	r11, r30
 a40:	b4 fe       	sbrs	r11, 4
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <vfprintf+0x28e>
 a44:	fb 2d       	mov	r31, r11
 a46:	f4 60       	ori	r31, 0x04	; 4
 a48:	bf 2e       	mov	r11, r31
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <vfprintf+0x28e>
 a4c:	34 fe       	sbrs	r3, 4
 a4e:	0a c0       	rjmp	.+20     	; 0xa64 <vfprintf+0x294>
 a50:	29 2f       	mov	r18, r25
 a52:	26 60       	ori	r18, 0x06	; 6
 a54:	b2 2e       	mov	r11, r18
 a56:	06 c0       	rjmp	.+12     	; 0xa64 <vfprintf+0x294>
 a58:	28 e0       	ldi	r18, 0x08	; 8
 a5a:	30 e0       	ldi	r19, 0x00	; 0
 a5c:	05 c0       	rjmp	.+10     	; 0xa68 <vfprintf+0x298>
 a5e:	20 e1       	ldi	r18, 0x10	; 16
 a60:	30 e0       	ldi	r19, 0x00	; 0
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x298>
 a64:	20 e1       	ldi	r18, 0x10	; 16
 a66:	32 e0       	ldi	r19, 0x02	; 2
 a68:	f8 01       	movw	r30, r16
 a6a:	b7 fe       	sbrs	r11, 7
 a6c:	07 c0       	rjmp	.+14     	; 0xa7c <vfprintf+0x2ac>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	82 81       	ldd	r24, Z+2	; 0x02
 a74:	93 81       	ldd	r25, Z+3	; 0x03
 a76:	0c 5f       	subi	r16, 0xFC	; 252
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	06 c0       	rjmp	.+12     	; 0xa88 <vfprintf+0x2b8>
 a7c:	60 81       	ld	r22, Z
 a7e:	71 81       	ldd	r23, Z+1	; 0x01
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 5f       	subi	r16, 0xFE	; 254
 a86:	1f 4f       	sbci	r17, 0xFF	; 255
 a88:	a3 01       	movw	r20, r6
 a8a:	f1 d0       	rcall	.+482    	; 0xc6e <__ultoa_invert>
 a8c:	88 2e       	mov	r8, r24
 a8e:	86 18       	sub	r8, r6
 a90:	fb 2d       	mov	r31, r11
 a92:	ff 77       	andi	r31, 0x7F	; 127
 a94:	3f 2e       	mov	r3, r31
 a96:	36 fe       	sbrs	r3, 6
 a98:	0d c0       	rjmp	.+26     	; 0xab4 <vfprintf+0x2e4>
 a9a:	23 2d       	mov	r18, r3
 a9c:	2e 7f       	andi	r18, 0xFE	; 254
 a9e:	a2 2e       	mov	r10, r18
 aa0:	89 14       	cp	r8, r9
 aa2:	58 f4       	brcc	.+22     	; 0xaba <vfprintf+0x2ea>
 aa4:	34 fe       	sbrs	r3, 4
 aa6:	0b c0       	rjmp	.+22     	; 0xabe <vfprintf+0x2ee>
 aa8:	32 fc       	sbrc	r3, 2
 aaa:	09 c0       	rjmp	.+18     	; 0xabe <vfprintf+0x2ee>
 aac:	83 2d       	mov	r24, r3
 aae:	8e 7e       	andi	r24, 0xEE	; 238
 ab0:	a8 2e       	mov	r10, r24
 ab2:	05 c0       	rjmp	.+10     	; 0xabe <vfprintf+0x2ee>
 ab4:	b8 2c       	mov	r11, r8
 ab6:	a3 2c       	mov	r10, r3
 ab8:	03 c0       	rjmp	.+6      	; 0xac0 <vfprintf+0x2f0>
 aba:	b8 2c       	mov	r11, r8
 abc:	01 c0       	rjmp	.+2      	; 0xac0 <vfprintf+0x2f0>
 abe:	b9 2c       	mov	r11, r9
 ac0:	a4 fe       	sbrs	r10, 4
 ac2:	0f c0       	rjmp	.+30     	; 0xae2 <vfprintf+0x312>
 ac4:	fe 01       	movw	r30, r28
 ac6:	e8 0d       	add	r30, r8
 ac8:	f1 1d       	adc	r31, r1
 aca:	80 81       	ld	r24, Z
 acc:	80 33       	cpi	r24, 0x30	; 48
 ace:	21 f4       	brne	.+8      	; 0xad8 <vfprintf+0x308>
 ad0:	9a 2d       	mov	r25, r10
 ad2:	99 7e       	andi	r25, 0xE9	; 233
 ad4:	a9 2e       	mov	r10, r25
 ad6:	09 c0       	rjmp	.+18     	; 0xaea <vfprintf+0x31a>
 ad8:	a2 fe       	sbrs	r10, 2
 ada:	06 c0       	rjmp	.+12     	; 0xae8 <vfprintf+0x318>
 adc:	b3 94       	inc	r11
 ade:	b3 94       	inc	r11
 ae0:	04 c0       	rjmp	.+8      	; 0xaea <vfprintf+0x31a>
 ae2:	8a 2d       	mov	r24, r10
 ae4:	86 78       	andi	r24, 0x86	; 134
 ae6:	09 f0       	breq	.+2      	; 0xaea <vfprintf+0x31a>
 ae8:	b3 94       	inc	r11
 aea:	a3 fc       	sbrc	r10, 3
 aec:	10 c0       	rjmp	.+32     	; 0xb0e <vfprintf+0x33e>
 aee:	a0 fe       	sbrs	r10, 0
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0x32e>
 af2:	b2 14       	cp	r11, r2
 af4:	80 f4       	brcc	.+32     	; 0xb16 <vfprintf+0x346>
 af6:	28 0c       	add	r2, r8
 af8:	92 2c       	mov	r9, r2
 afa:	9b 18       	sub	r9, r11
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x348>
 afe:	b2 14       	cp	r11, r2
 b00:	58 f4       	brcc	.+22     	; 0xb18 <vfprintf+0x348>
 b02:	b6 01       	movw	r22, r12
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	76 d0       	rcall	.+236    	; 0xbf6 <fputc>
 b0a:	b3 94       	inc	r11
 b0c:	f8 cf       	rjmp	.-16     	; 0xafe <vfprintf+0x32e>
 b0e:	b2 14       	cp	r11, r2
 b10:	18 f4       	brcc	.+6      	; 0xb18 <vfprintf+0x348>
 b12:	2b 18       	sub	r2, r11
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x34a>
 b16:	98 2c       	mov	r9, r8
 b18:	21 2c       	mov	r2, r1
 b1a:	a4 fe       	sbrs	r10, 4
 b1c:	0f c0       	rjmp	.+30     	; 0xb3c <vfprintf+0x36c>
 b1e:	b6 01       	movw	r22, r12
 b20:	80 e3       	ldi	r24, 0x30	; 48
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	68 d0       	rcall	.+208    	; 0xbf6 <fputc>
 b26:	a2 fe       	sbrs	r10, 2
 b28:	16 c0       	rjmp	.+44     	; 0xb56 <vfprintf+0x386>
 b2a:	a1 fc       	sbrc	r10, 1
 b2c:	03 c0       	rjmp	.+6      	; 0xb34 <vfprintf+0x364>
 b2e:	88 e7       	ldi	r24, 0x78	; 120
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	02 c0       	rjmp	.+4      	; 0xb38 <vfprintf+0x368>
 b34:	88 e5       	ldi	r24, 0x58	; 88
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	b6 01       	movw	r22, r12
 b3a:	0c c0       	rjmp	.+24     	; 0xb54 <vfprintf+0x384>
 b3c:	8a 2d       	mov	r24, r10
 b3e:	86 78       	andi	r24, 0x86	; 134
 b40:	51 f0       	breq	.+20     	; 0xb56 <vfprintf+0x386>
 b42:	a1 fe       	sbrs	r10, 1
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0x37a>
 b46:	8b e2       	ldi	r24, 0x2B	; 43
 b48:	01 c0       	rjmp	.+2      	; 0xb4c <vfprintf+0x37c>
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	a7 fc       	sbrc	r10, 7
 b4e:	8d e2       	ldi	r24, 0x2D	; 45
 b50:	b6 01       	movw	r22, r12
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	50 d0       	rcall	.+160    	; 0xbf6 <fputc>
 b56:	89 14       	cp	r8, r9
 b58:	30 f4       	brcc	.+12     	; 0xb66 <vfprintf+0x396>
 b5a:	b6 01       	movw	r22, r12
 b5c:	80 e3       	ldi	r24, 0x30	; 48
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	4a d0       	rcall	.+148    	; 0xbf6 <fputc>
 b62:	9a 94       	dec	r9
 b64:	f8 cf       	rjmp	.-16     	; 0xb56 <vfprintf+0x386>
 b66:	8a 94       	dec	r8
 b68:	f3 01       	movw	r30, r6
 b6a:	e8 0d       	add	r30, r8
 b6c:	f1 1d       	adc	r31, r1
 b6e:	80 81       	ld	r24, Z
 b70:	b6 01       	movw	r22, r12
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	40 d0       	rcall	.+128    	; 0xbf6 <fputc>
 b76:	81 10       	cpse	r8, r1
 b78:	f6 cf       	rjmp	.-20     	; 0xb66 <vfprintf+0x396>
 b7a:	22 20       	and	r2, r2
 b7c:	09 f4       	brne	.+2      	; 0xb80 <vfprintf+0x3b0>
 b7e:	4e ce       	rjmp	.-868    	; 0x81c <vfprintf+0x4c>
 b80:	b6 01       	movw	r22, r12
 b82:	80 e2       	ldi	r24, 0x20	; 32
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	37 d0       	rcall	.+110    	; 0xbf6 <fputc>
 b88:	2a 94       	dec	r2
 b8a:	f7 cf       	rjmp	.-18     	; 0xb7a <vfprintf+0x3aa>
 b8c:	f6 01       	movw	r30, r12
 b8e:	86 81       	ldd	r24, Z+6	; 0x06
 b90:	97 81       	ldd	r25, Z+7	; 0x07
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <vfprintf+0x3c8>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	2b 96       	adiw	r28, 0x0b	; 11
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	1f 91       	pop	r17
 baa:	0f 91       	pop	r16
 bac:	ff 90       	pop	r15
 bae:	ef 90       	pop	r14
 bb0:	df 90       	pop	r13
 bb2:	cf 90       	pop	r12
 bb4:	bf 90       	pop	r11
 bb6:	af 90       	pop	r10
 bb8:	9f 90       	pop	r9
 bba:	8f 90       	pop	r8
 bbc:	7f 90       	pop	r7
 bbe:	6f 90       	pop	r6
 bc0:	5f 90       	pop	r5
 bc2:	4f 90       	pop	r4
 bc4:	3f 90       	pop	r3
 bc6:	2f 90       	pop	r2
 bc8:	08 95       	ret

00000bca <strnlen_P>:
 bca:	fc 01       	movw	r30, r24
 bcc:	05 90       	lpm	r0, Z+
 bce:	61 50       	subi	r22, 0x01	; 1
 bd0:	70 40       	sbci	r23, 0x00	; 0
 bd2:	01 10       	cpse	r0, r1
 bd4:	d8 f7       	brcc	.-10     	; 0xbcc <strnlen_P+0x2>
 bd6:	80 95       	com	r24
 bd8:	90 95       	com	r25
 bda:	8e 0f       	add	r24, r30
 bdc:	9f 1f       	adc	r25, r31
 bde:	08 95       	ret

00000be0 <strnlen>:
 be0:	fc 01       	movw	r30, r24
 be2:	61 50       	subi	r22, 0x01	; 1
 be4:	70 40       	sbci	r23, 0x00	; 0
 be6:	01 90       	ld	r0, Z+
 be8:	01 10       	cpse	r0, r1
 bea:	d8 f7       	brcc	.-10     	; 0xbe2 <strnlen+0x2>
 bec:	80 95       	com	r24
 bee:	90 95       	com	r25
 bf0:	8e 0f       	add	r24, r30
 bf2:	9f 1f       	adc	r25, r31
 bf4:	08 95       	ret

00000bf6 <fputc>:
 bf6:	0f 93       	push	r16
 bf8:	1f 93       	push	r17
 bfa:	cf 93       	push	r28
 bfc:	df 93       	push	r29
 bfe:	fb 01       	movw	r30, r22
 c00:	23 81       	ldd	r18, Z+3	; 0x03
 c02:	21 fd       	sbrc	r18, 1
 c04:	03 c0       	rjmp	.+6      	; 0xc0c <fputc+0x16>
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	9f ef       	ldi	r25, 0xFF	; 255
 c0a:	2c c0       	rjmp	.+88     	; 0xc64 <fputc+0x6e>
 c0c:	22 ff       	sbrs	r18, 2
 c0e:	16 c0       	rjmp	.+44     	; 0xc3c <fputc+0x46>
 c10:	46 81       	ldd	r20, Z+6	; 0x06
 c12:	57 81       	ldd	r21, Z+7	; 0x07
 c14:	24 81       	ldd	r18, Z+4	; 0x04
 c16:	35 81       	ldd	r19, Z+5	; 0x05
 c18:	42 17       	cp	r20, r18
 c1a:	53 07       	cpc	r21, r19
 c1c:	44 f4       	brge	.+16     	; 0xc2e <fputc+0x38>
 c1e:	a0 81       	ld	r26, Z
 c20:	b1 81       	ldd	r27, Z+1	; 0x01
 c22:	9d 01       	movw	r18, r26
 c24:	2f 5f       	subi	r18, 0xFF	; 255
 c26:	3f 4f       	sbci	r19, 0xFF	; 255
 c28:	31 83       	std	Z+1, r19	; 0x01
 c2a:	20 83       	st	Z, r18
 c2c:	8c 93       	st	X, r24
 c2e:	26 81       	ldd	r18, Z+6	; 0x06
 c30:	37 81       	ldd	r19, Z+7	; 0x07
 c32:	2f 5f       	subi	r18, 0xFF	; 255
 c34:	3f 4f       	sbci	r19, 0xFF	; 255
 c36:	37 83       	std	Z+7, r19	; 0x07
 c38:	26 83       	std	Z+6, r18	; 0x06
 c3a:	14 c0       	rjmp	.+40     	; 0xc64 <fputc+0x6e>
 c3c:	8b 01       	movw	r16, r22
 c3e:	ec 01       	movw	r28, r24
 c40:	fb 01       	movw	r30, r22
 c42:	00 84       	ldd	r0, Z+8	; 0x08
 c44:	f1 85       	ldd	r31, Z+9	; 0x09
 c46:	e0 2d       	mov	r30, r0
 c48:	09 95       	icall
 c4a:	89 2b       	or	r24, r25
 c4c:	e1 f6       	brne	.-72     	; 0xc06 <fputc+0x10>
 c4e:	d8 01       	movw	r26, r16
 c50:	16 96       	adiw	r26, 0x06	; 6
 c52:	8d 91       	ld	r24, X+
 c54:	9c 91       	ld	r25, X
 c56:	17 97       	sbiw	r26, 0x07	; 7
 c58:	01 96       	adiw	r24, 0x01	; 1
 c5a:	17 96       	adiw	r26, 0x07	; 7
 c5c:	9c 93       	st	X, r25
 c5e:	8e 93       	st	-X, r24
 c60:	16 97       	sbiw	r26, 0x06	; 6
 c62:	ce 01       	movw	r24, r28
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	1f 91       	pop	r17
 c6a:	0f 91       	pop	r16
 c6c:	08 95       	ret

00000c6e <__ultoa_invert>:
 c6e:	fa 01       	movw	r30, r20
 c70:	aa 27       	eor	r26, r26
 c72:	28 30       	cpi	r18, 0x08	; 8
 c74:	51 f1       	breq	.+84     	; 0xcca <__ultoa_invert+0x5c>
 c76:	20 31       	cpi	r18, 0x10	; 16
 c78:	81 f1       	breq	.+96     	; 0xcda <__ultoa_invert+0x6c>
 c7a:	e8 94       	clt
 c7c:	6f 93       	push	r22
 c7e:	6e 7f       	andi	r22, 0xFE	; 254
 c80:	6e 5f       	subi	r22, 0xFE	; 254
 c82:	7f 4f       	sbci	r23, 0xFF	; 255
 c84:	8f 4f       	sbci	r24, 0xFF	; 255
 c86:	9f 4f       	sbci	r25, 0xFF	; 255
 c88:	af 4f       	sbci	r26, 0xFF	; 255
 c8a:	b1 e0       	ldi	r27, 0x01	; 1
 c8c:	3e d0       	rcall	.+124    	; 0xd0a <__ultoa_invert+0x9c>
 c8e:	b4 e0       	ldi	r27, 0x04	; 4
 c90:	3c d0       	rcall	.+120    	; 0xd0a <__ultoa_invert+0x9c>
 c92:	67 0f       	add	r22, r23
 c94:	78 1f       	adc	r23, r24
 c96:	89 1f       	adc	r24, r25
 c98:	9a 1f       	adc	r25, r26
 c9a:	a1 1d       	adc	r26, r1
 c9c:	68 0f       	add	r22, r24
 c9e:	79 1f       	adc	r23, r25
 ca0:	8a 1f       	adc	r24, r26
 ca2:	91 1d       	adc	r25, r1
 ca4:	a1 1d       	adc	r26, r1
 ca6:	6a 0f       	add	r22, r26
 ca8:	71 1d       	adc	r23, r1
 caa:	81 1d       	adc	r24, r1
 cac:	91 1d       	adc	r25, r1
 cae:	a1 1d       	adc	r26, r1
 cb0:	20 d0       	rcall	.+64     	; 0xcf2 <__ultoa_invert+0x84>
 cb2:	09 f4       	brne	.+2      	; 0xcb6 <__ultoa_invert+0x48>
 cb4:	68 94       	set
 cb6:	3f 91       	pop	r19
 cb8:	2a e0       	ldi	r18, 0x0A	; 10
 cba:	26 9f       	mul	r18, r22
 cbc:	11 24       	eor	r1, r1
 cbe:	30 19       	sub	r19, r0
 cc0:	30 5d       	subi	r19, 0xD0	; 208
 cc2:	31 93       	st	Z+, r19
 cc4:	de f6       	brtc	.-74     	; 0xc7c <__ultoa_invert+0xe>
 cc6:	cf 01       	movw	r24, r30
 cc8:	08 95       	ret
 cca:	46 2f       	mov	r20, r22
 ccc:	47 70       	andi	r20, 0x07	; 7
 cce:	40 5d       	subi	r20, 0xD0	; 208
 cd0:	41 93       	st	Z+, r20
 cd2:	b3 e0       	ldi	r27, 0x03	; 3
 cd4:	0f d0       	rcall	.+30     	; 0xcf4 <__ultoa_invert+0x86>
 cd6:	c9 f7       	brne	.-14     	; 0xcca <__ultoa_invert+0x5c>
 cd8:	f6 cf       	rjmp	.-20     	; 0xcc6 <__ultoa_invert+0x58>
 cda:	46 2f       	mov	r20, r22
 cdc:	4f 70       	andi	r20, 0x0F	; 15
 cde:	40 5d       	subi	r20, 0xD0	; 208
 ce0:	4a 33       	cpi	r20, 0x3A	; 58
 ce2:	18 f0       	brcs	.+6      	; 0xcea <__ultoa_invert+0x7c>
 ce4:	49 5d       	subi	r20, 0xD9	; 217
 ce6:	31 fd       	sbrc	r19, 1
 ce8:	40 52       	subi	r20, 0x20	; 32
 cea:	41 93       	st	Z+, r20
 cec:	02 d0       	rcall	.+4      	; 0xcf2 <__ultoa_invert+0x84>
 cee:	a9 f7       	brne	.-22     	; 0xcda <__ultoa_invert+0x6c>
 cf0:	ea cf       	rjmp	.-44     	; 0xcc6 <__ultoa_invert+0x58>
 cf2:	b4 e0       	ldi	r27, 0x04	; 4
 cf4:	a6 95       	lsr	r26
 cf6:	97 95       	ror	r25
 cf8:	87 95       	ror	r24
 cfa:	77 95       	ror	r23
 cfc:	67 95       	ror	r22
 cfe:	ba 95       	dec	r27
 d00:	c9 f7       	brne	.-14     	; 0xcf4 <__ultoa_invert+0x86>
 d02:	00 97       	sbiw	r24, 0x00	; 0
 d04:	61 05       	cpc	r22, r1
 d06:	71 05       	cpc	r23, r1
 d08:	08 95       	ret
 d0a:	9b 01       	movw	r18, r22
 d0c:	ac 01       	movw	r20, r24
 d0e:	0a 2e       	mov	r0, r26
 d10:	06 94       	lsr	r0
 d12:	57 95       	ror	r21
 d14:	47 95       	ror	r20
 d16:	37 95       	ror	r19
 d18:	27 95       	ror	r18
 d1a:	ba 95       	dec	r27
 d1c:	c9 f7       	brne	.-14     	; 0xd10 <__ultoa_invert+0xa2>
 d1e:	62 0f       	add	r22, r18
 d20:	73 1f       	adc	r23, r19
 d22:	84 1f       	adc	r24, r20
 d24:	95 1f       	adc	r25, r21
 d26:	a0 1d       	adc	r26, r0
 d28:	08 95       	ret

00000d2a <_exit>:
 d2a:	f8 94       	cli

00000d2c <__stop_program>:
 d2c:	ff cf       	rjmp	.-2      	; 0xd2c <__stop_program>
