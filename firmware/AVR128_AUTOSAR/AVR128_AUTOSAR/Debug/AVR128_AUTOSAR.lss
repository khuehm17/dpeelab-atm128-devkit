
AVR128_AUTOSAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  0000109c  00001130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000109c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080019e  0080019e  000011ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003578  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001817  00000000  00000000  00004b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001efc  00000000  00000000  00006337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006cc  00000000  00000000  00008234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e4f  00000000  00000000  00008900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001866  00000000  00000000  0000974f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000afb5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
       2:	00 00       	nop
       4:	69 c0       	rjmp	.+210    	; 0xd8 <__bad_interrupt>
       6:	00 00       	nop
       8:	67 c0       	rjmp	.+206    	; 0xd8 <__bad_interrupt>
       a:	00 00       	nop
       c:	65 c0       	rjmp	.+202    	; 0xd8 <__bad_interrupt>
       e:	00 00       	nop
      10:	63 c0       	rjmp	.+198    	; 0xd8 <__bad_interrupt>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	4d c0       	rjmp	.+154    	; 0xd8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d2 02       	muls	r29, r18
      8e:	e4 02       	muls	r30, r20
      90:	f6 02       	muls	r31, r22
      92:	08 03       	fmul	r16, r16
      94:	1a 03       	fmul	r17, r18
      96:	2c 03       	fmul	r18, r20
      98:	3e 03       	fmul	r19, r22
      9a:	50 03       	mulsu	r21, r16
      9c:	62 03       	mulsu	r22, r18

0000009e <__ctors_end>:
      9e:	11 24       	eor	r1, r1
      a0:	1f be       	out	0x3f, r1	; 63
      a2:	cf ef       	ldi	r28, 0xFF	; 255
      a4:	d0 e1       	ldi	r29, 0x10	; 16
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	ec e9       	ldi	r30, 0x9C	; 156
      b2:	f0 e1       	ldi	r31, 0x10	; 16
      b4:	00 e0       	ldi	r16, 0x00	; 0
      b6:	0b bf       	out	0x3b, r16	; 59
      b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x14>
      ba:	07 90       	elpm	r0, Z+
      bc:	0d 92       	st	X+, r0
      be:	ae 39       	cpi	r26, 0x9E	; 158
      c0:	b1 07       	cpc	r27, r17
      c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x10>

000000c4 <__do_clear_bss>:
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	ae e9       	ldi	r26, 0x9E	; 158
      c8:	b1 e0       	ldi	r27, 0x01	; 1
      ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
      cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
      ce:	a6 3b       	cpi	r26, 0xB6	; 182
      d0:	b2 07       	cpc	r27, r18
      d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
      d4:	0b d4       	rcall	.+2070   	; 0x8ec <main>
      d6:	e0 c7       	rjmp	.+4032   	; 0x1098 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <Apl_mainTaskStateInit>:
  * @param
  * @retval
  */
void Apl_networkInit(void)
{
	memset((void*)UART_Data, ZERO, sizeof(UART_Struct));
      da:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <Apl_gpioCurrentSts>
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	87 e0       	ldi	r24, 0x07	; 7
      e4:	4f d2       	rcall	.+1182   	; 0x584 <Apl_setEvt>
      e6:	bb d3       	rcall	.+1910   	; 0x85e <clr_LCD>
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	98 d3       	rcall	.+1840   	; 0x81e <move_LCD>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	91 e0       	ldi	r25, 0x01	; 1
      f2:	9f 93       	push	r25
      f4:	8f 93       	push	r24
      f6:	d2 d3       	rcall	.+1956   	; 0x89c <printf_LCD>
      f8:	0f 90       	pop	r0
      fa:	0f 90       	pop	r0
      fc:	08 95       	ret

000000fe <Apl_controllerUnitInit>:
  * @param
  * @param
  * @retval
  */
void Apl_controllerUnitInit(void)
{
      fe:	cf 93       	push	r28
	memset((void*) ControllerUnit, 0, sizeof(ControllerStr));
     100:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     104:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     108:	88 e0       	ldi	r24, 0x08	; 8
     10a:	df 01       	movw	r26, r30
     10c:	1d 92       	st	X+, r1
     10e:	8a 95       	dec	r24
     110:	e9 f7       	brne	.-6      	; 0x10c <Apl_controllerUnitInit+0xe>
	ControllerUnit->ChanelA = CHANEL_CLEAR;
     112:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     116:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     11a:	10 82       	st	Z, r1
	ControllerUnit->chanelB = CHANEL_CLEAR;
     11c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     120:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     124:	11 82       	std	Z+1, r1	; 0x01
	ControllerUnit->PMW = PMW_CLEAR;
     126:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     12a:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     12e:	13 82       	std	Z+3, r1	; 0x03
     130:	12 82       	std	Z+2, r1	; 0x02
	ControllerUnit->goStraight = ARG_FALSE;
     132:	14 82       	std	Z+4, r1	; 0x04
	ControllerUnit->goLeft = ARG_FALSE;
     134:	15 82       	std	Z+5, r1	; 0x05
	ControllerUnit->goRight = ARG_FALSE;
     136:	16 82       	std	Z+6, r1	; 0x06
	ControllerUnit->Session = APL_DEFAULT_SESSION;
     138:	c1 e0       	ldi	r28, 0x01	; 1
     13a:	c7 83       	std	Z+7, r28	; 0x07
	
	move_LCD(2,0);
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	82 e0       	ldi	r24, 0x02	; 2
     140:	6e d3       	rcall	.+1756   	; 0x81e <move_LCD>
	printf_LCD("DEFAULT");
     142:	89 e0       	ldi	r24, 0x09	; 9
     144:	91 e0       	ldi	r25, 0x01	; 1
     146:	9f 93       	push	r25
     148:	8f 93       	push	r24
     14a:	a8 d3       	rcall	.+1872   	; 0x89c <printf_LCD>
	
	Apl_FlagCom = E_NOTOK;
     14c:	c0 93 b5 01 	sts	0x01B5, r28	; 0x8001b5 <Apl_FlagCom>
	
	return;
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
}
     154:	cf 91       	pop	r28
     156:	08 95       	ret

00000158 <Apl_Init>:
  * @param
  * @retval
  */
void Apl_Init(void)
{
	BSW_driverInit();
     158:	c5 d3       	rcall	.+1930   	; 0x8e4 <BSW_driverInit>
	//Apl_networkInit();
	Apl_mainTaskStateInit();
     15a:	bf df       	rcall	.-130    	; 0xda <Apl_mainTaskStateInit>
	Apl_controllerUnitInit();
     15c:	d0 cf       	rjmp	.-96     	; 0xfe <Apl_controllerUnitInit>
     15e:	08 95       	ret

00000160 <Apl_controllerUnitTsk>:
     160:	0d d2       	rcall	.+1050   	; 0x57c <Apl_getCurrentSts>
void Apl_controllerUnitTsk(void) {
	uint16 u2a_currentSts;
	
	u2a_currentSts = Apl_getCurrentSts();
	
	if (APL_TASKLIST_IDLE == u2a_currentSts) {
     162:	89 2b       	or	r24, r25
     164:	09 f0       	breq	.+2      	; 0x168 <Apl_controllerUnitTsk+0x8>
     166:	98 c0       	rjmp	.+304    	; 0x298 <Apl_controllerUnitTsk+0x138>
		
		switch(ControllerUnit->Session){
     168:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     16c:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     170:	87 81       	ldd	r24, Z+7	; 0x07
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	21 f0       	breq	.+8      	; 0x17e <Apl_controllerUnitTsk+0x1e>
     176:	83 30       	cpi	r24, 0x03	; 3
     178:	09 f4       	brne	.+2      	; 0x17c <Apl_controllerUnitTsk+0x1c>
     17a:	43 c0       	rjmp	.+134    	; 0x202 <Apl_controllerUnitTsk+0xa2>
			case APL_PRO_SESSION:
			{
				clr_LCD();
     17c:	77 c0       	rjmp	.+238    	; 0x26c <Apl_controllerUnitTsk+0x10c>
     17e:	6f d3       	rcall	.+1758   	; 0x85e <clr_LCD>
				move_LCD(0,0);
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	4c d3       	rcall	.+1688   	; 0x81e <move_LCD>
				printf_LCD("Sts IDLE");
     186:	80 e0       	ldi	r24, 0x00	; 0
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	9f 93       	push	r25
     18c:	8f 93       	push	r24
				move_LCD(2,0);
     18e:	86 d3       	rcall	.+1804   	; 0x89c <printf_LCD>
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	82 e0       	ldi	r24, 0x02	; 2
				printf_LCD("PROGRAMMING");
     194:	44 d3       	rcall	.+1672   	; 0x81e <move_LCD>
     196:	81 e1       	ldi	r24, 0x11	; 17
     198:	91 e0       	ldi	r25, 0x01	; 1
     19a:	9f 93       	push	r25
     19c:	8f 93       	push	r24
     19e:	7e d3       	rcall	.+1788   	; 0x89c <printf_LCD>
				
				if (ARG_TRUE == ControllerUnit->goStraight) {
     1a0:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     1a4:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     1a8:	84 81       	ldd	r24, Z+4	; 0x04
     1aa:	0f 90       	pop	r0
     1ac:	0f 90       	pop	r0
     1ae:	0f 90       	pop	r0
     1b0:	0f 90       	pop	r0
     1b2:	81 30       	cpi	r24, 0x01	; 1
					Apl_setEvt(APL_EXECUTE_EVENT_GOSTRAIGHT, NULL);
     1b4:	51 f4       	brne	.+20     	; 0x1ca <Apl_controllerUnitTsk+0x6a>
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	e3 d1       	rcall	.+966    	; 0x584 <Apl_setEvt>
					ControllerUnit->goStraight = ARG_FALSE;
     1be:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     1c2:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     1c6:	14 82       	std	Z+4, r1	; 0x04
				}
				else if (ARG_TRUE == ControllerUnit->goRight) {
     1c8:	08 95       	ret
     1ca:	86 81       	ldd	r24, Z+6	; 0x06
     1cc:	81 30       	cpi	r24, 0x01	; 1
					Apl_setEvt(APL_EXECUTE_EVENT_GORIGHT, NULL);
     1ce:	51 f4       	brne	.+20     	; 0x1e4 <Apl_controllerUnitTsk+0x84>
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	d6 d1       	rcall	.+940    	; 0x584 <Apl_setEvt>
					ControllerUnit->goRight = ARG_FALSE;
     1d8:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     1dc:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     1e0:	16 82       	std	Z+6, r1	; 0x06
				} else {
					move_LCD(0,0);
     1e2:	08 95       	ret
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
					printf_LCD("Sts IDLE");
     1e8:	1a d3       	rcall	.+1588   	; 0x81e <move_LCD>
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	91 e0       	ldi	r25, 0x01	; 1
     1ee:	9f 93       	push	r25
     1f0:	8f 93       	push	r24
					Apl_setEvt(APL_EXECUTE_EVENT_COM, NULL);
     1f2:	54 d3       	rcall	.+1704   	; 0x89c <printf_LCD>
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	86 e0       	ldi	r24, 0x06	; 6
     1fa:	c4 d1       	rcall	.+904    	; 0x584 <Apl_setEvt>
     1fc:	0f 90       	pop	r0
				break;
			}
			
			case APL_EXTEND_SESSION:
			{
				clr_LCD();
     1fe:	0f 90       	pop	r0
				move_LCD(0,0);
     200:	08 95       	ret
     202:	2d d3       	rcall	.+1626   	; 0x85e <clr_LCD>
     204:	60 e0       	ldi	r22, 0x00	; 0
				printf_LCD("Sts IDLE");
     206:	80 e0       	ldi	r24, 0x00	; 0
     208:	0a d3       	rcall	.+1556   	; 0x81e <move_LCD>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	91 e0       	ldi	r25, 0x01	; 1
     20e:	9f 93       	push	r25
     210:	8f 93       	push	r24
				move_LCD(2,0);
     212:	44 d3       	rcall	.+1672   	; 0x89c <printf_LCD>
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	02 d3       	rcall	.+1540   	; 0x81e <move_LCD>
				printf_LCD("EXTEND");
     21a:	8d e1       	ldi	r24, 0x1D	; 29
     21c:	91 e0       	ldi	r25, 0x01	; 1
     21e:	9f 93       	push	r25
     220:	8f 93       	push	r24
     222:	3c d3       	rcall	.+1656   	; 0x89c <printf_LCD>
				if (ARG_TRUE == ControllerUnit->goLeft) {
     224:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     228:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     22c:	85 81       	ldd	r24, Z+5	; 0x05
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	81 30       	cpi	r24, 0x01	; 1
					Apl_setEvt(APL_EXECUTE_EVENT_GOLEFT, NULL);
     238:	51 f4       	brne	.+20     	; 0x24e <Apl_controllerUnitTsk+0xee>
     23a:	60 e0       	ldi	r22, 0x00	; 0
     23c:	70 e0       	ldi	r23, 0x00	; 0
     23e:	82 e0       	ldi	r24, 0x02	; 2
					ControllerUnit->goLeft = ARG_FALSE;
     240:	a1 d1       	rcall	.+834    	; 0x584 <Apl_setEvt>
     242:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     246:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
				} else {
					move_LCD(0,0);
     24a:	15 82       	std	Z+5, r1	; 0x05
     24c:	08 95       	ret
					printf_LCD("Sts IDLE");
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	e5 d2       	rcall	.+1482   	; 0x81e <move_LCD>
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	91 e0       	ldi	r25, 0x01	; 1
					Apl_setEvt(APL_EXECUTE_EVENT_COM, NULL);
     258:	9f 93       	push	r25
     25a:	8f 93       	push	r24
     25c:	1f d3       	rcall	.+1598   	; 0x89c <printf_LCD>
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	86 e0       	ldi	r24, 0x06	; 6
     264:	8f d1       	rcall	.+798    	; 0x584 <Apl_setEvt>
				}
				break;
			}
			
			default:
				clr_LCD();
     266:	0f 90       	pop	r0
     268:	0f 90       	pop	r0
				move_LCD(0,0);
     26a:	08 95       	ret
     26c:	f8 d2       	rcall	.+1520   	; 0x85e <clr_LCD>
     26e:	60 e0       	ldi	r22, 0x00	; 0
				printf_LCD("Sts IDLE");
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	d5 d2       	rcall	.+1450   	; 0x81e <move_LCD>
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	91 e0       	ldi	r25, 0x01	; 1
     278:	9f 93       	push	r25
     27a:	8f 93       	push	r24
				move_LCD(2,0);
     27c:	0f d3       	rcall	.+1566   	; 0x89c <printf_LCD>
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	82 e0       	ldi	r24, 0x02	; 2
     282:	cd d2       	rcall	.+1434   	; 0x81e <move_LCD>
				printf_LCD("DEFAULT");
     284:	89 e0       	ldi	r24, 0x09	; 9
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	9f 93       	push	r25
     28a:	8f 93       	push	r24
     28c:	07 d3       	rcall	.+1550   	; 0x89c <printf_LCD>
     28e:	0f 90       	pop	r0
				break;
     290:	0f 90       	pop	r0
     292:	0f 90       	pop	r0
     294:	0f 90       	pop	r0
     296:	08 95       	ret
     298:	60 e0       	ldi	r22, 0x00	; 0
		}
		
	} else {
		Apl_setEvt(APL_EXECUTE_EVENT_COM, NULL);
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	86 e0       	ldi	r24, 0x06	; 6
     29e:	72 c1       	rjmp	.+740    	; 0x584 <Apl_setEvt>
     2a0:	08 95       	ret

000002a2 <Apl_mainTask>:
     2a2:	cf 93       	push	r28
     2a4:	6b d1       	rcall	.+726    	; 0x57c <Apl_getCurrentSts>
	
	u2a_currentSts = Apl_getCurrentSts();
	
	//WDT_DISABLE();
		
	if (APL_TASKLIST_IDLE == u2a_currentSts) {
     2a6:	89 2b       	or	r24, r25
     2a8:	29 f4       	brne	.+10     	; 0x2b4 <Apl_mainTask+0x12>
		Apl_UART_RECEIVE(UART_Data);
     2aa:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <UART_Data>
     2ae:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <UART_Data+0x1>
     2b2:	39 d2       	rcall	.+1138   	; 0x726 <Apl_UART_RECEIVE>
  *         
  * @param
  * @param
  * @retval
  */
void Apl_mainTask(void) {
     2b4:	c0 e0       	ldi	r28, 0x00	; 0
     2b6:	20 c0       	rjmp	.+64     	; 0x2f8 <Apl_mainTask+0x56>
	
	//WDT_ENABLE(TIMEOUT_1S);
	
	for (u1a_indx = 0; sizeof(UDS_SERVICE_TABLE)/sizeof(UDS_SERVICE) > u1a_indx; u1a_indx++)
	{
		if (UART_Data->Apl_BufferRead[0] == UDS_SERVICE_TABLE[u1a_indx].SID) {
     2b8:	a0 91 b3 01 	lds	r26, 0x01B3	; 0x8001b3 <UART_Data>
     2bc:	b0 91 b4 01 	lds	r27, 0x01B4	; 0x8001b4 <UART_Data+0x1>
     2c0:	9c 91       	ld	r25, X
     2c2:	2c 2f       	mov	r18, r28
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	e2 0f       	add	r30, r18
     2ce:	f3 1f       	adc	r31, r19
     2d0:	ec 5d       	subi	r30, 0xDC	; 220
     2d2:	fe 4f       	sbci	r31, 0xFE	; 254
     2d4:	80 81       	ld	r24, Z
     2d6:	98 13       	cpse	r25, r24
     2d8:	0e c0       	rjmp	.+28     	; 0x2f6 <Apl_mainTask+0x54>
			 UDS_SERVICE_TABLE[u1a_indx].Func(&UART_Data->Apl_BufferRead[1]);
     2da:	f9 01       	movw	r30, r18
     2dc:	ee 0f       	add	r30, r30
     2de:	ff 1f       	adc	r31, r31
     2e0:	2e 0f       	add	r18, r30
     2e2:	3f 1f       	adc	r19, r31
     2e4:	f9 01       	movw	r30, r18
     2e6:	ec 5d       	subi	r30, 0xDC	; 220
     2e8:	fe 4f       	sbci	r31, 0xFE	; 254
     2ea:	01 80       	ldd	r0, Z+1	; 0x01
     2ec:	f2 81       	ldd	r31, Z+2	; 0x02
     2ee:	e0 2d       	mov	r30, r0
     2f0:	cd 01       	movw	r24, r26
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	09 95       	icall
		Apl_UART_RECEIVE(UART_Data);
	}
	
	//WDT_ENABLE(TIMEOUT_1S);
	
	for (u1a_indx = 0; sizeof(UDS_SERVICE_TABLE)/sizeof(UDS_SERVICE) > u1a_indx; u1a_indx++)
     2f6:	cf 5f       	subi	r28, 0xFF	; 255
     2f8:	c3 30       	cpi	r28, 0x03	; 3
		if (UART_Data->Apl_BufferRead[0] == UDS_SERVICE_TABLE[u1a_indx].SID) {
			 UDS_SERVICE_TABLE[u1a_indx].Func(&UART_Data->Apl_BufferRead[1]);
		}
	}
	
	Apl_controllerUnitTsk();
     2fa:	f0 f2       	brcs	.-68     	; 0x2b8 <Apl_mainTask+0x16>
     2fc:	31 df       	rcall	.-414    	; 0x160 <Apl_controllerUnitTsk>
}
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <Apl_mainGoLeftWait_EvEnd>:
  * @param
  * @retval
  */
void Apl_mainGoLeftWait_EvEnd(void* para)
{
	if (E_OK == Apl_FlagCom) {
     302:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Apl_FlagCom>
     306:	81 11       	cpse	r24, r1
     308:	1d c0       	rjmp	.+58     	; 0x344 <Apl_mainGoLeftWait_EvEnd+0x42>
		Apl_gpioChangeState(APL_TASKLIST_IDLE, NULL);
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	fd d0       	rcall	.+506    	; 0x50e <Apl_gpioChangeState>
		clr_LCD();
     314:	a4 d2       	rcall	.+1352   	; 0x85e <clr_LCD>
     316:	60 e0       	ldi	r22, 0x00	; 0
		move_LCD(0,0);
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	81 d2       	rcall	.+1282   	; 0x81e <move_LCD>
     31c:	80 e0       	ldi	r24, 0x00	; 0
		printf_LCD("Sts IDLE");
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	9f 93       	push	r25
     322:	8f 93       	push	r24
     324:	bb d2       	rcall	.+1398   	; 0x89c <printf_LCD>
		move_LCD(2,0);
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	79 d2       	rcall	.+1266   	; 0x81e <move_LCD>
		printf_LCD("EXTEND");
     32c:	8d e1       	ldi	r24, 0x1D	; 29
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	b3 d2       	rcall	.+1382   	; 0x89c <printf_LCD>
     336:	81 e0       	ldi	r24, 0x01	; 1
		Apl_FlagCom = E_NOTOK;
     338:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Apl_FlagCom>
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	0f 90       	pop	r0
     344:	08 95       	ret

00000346 <Apl_mainGoLeftWait_EvJob>:
     346:	8b d2       	rcall	.+1302   	; 0x85e <clr_LCD>
  * @retval
  */
void Apl_mainGoLeftWait_EvJob(void* para)
{
	clr_LCD();
	move_LCD(0,0);
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	68 d2       	rcall	.+1232   	; 0x81e <move_LCD>
	printf_LCD("Sts GO LEFT");
     34e:	8d e2       	ldi	r24, 0x2D	; 45
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	9f 93       	push	r25
     354:	8f 93       	push	r24
     356:	a2 d2       	rcall	.+1348   	; 0x89c <printf_LCD>
	move_LCD(2,0);
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	60 d2       	rcall	.+1216   	; 0x81e <move_LCD>
     35e:	8d e1       	ldi	r24, 0x1D	; 29
	printf_LCD("EXTEND");
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	9a d2       	rcall	.+1332   	; 0x89c <printf_LCD>
     368:	93 b1       	in	r25, 0x03	; 3

	PORTE ^= (1<<PE4);
     36a:	80 e1       	ldi	r24, 0x10	; 16
     36c:	89 27       	eor	r24, r25
     36e:	83 b9       	out	0x03, r24	; 3
     370:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     372:	8f e3       	ldi	r24, 0x3F	; 63
     374:	9b e0       	ldi	r25, 0x0B	; 11
     376:	21 50       	subi	r18, 0x01	; 1
     378:	80 40       	sbci	r24, 0x00	; 0
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e1 f7       	brne	.-8      	; 0x376 <Apl_mainGoLeftWait_EvJob+0x30>
     37e:	00 c0       	rjmp	.+0      	; 0x380 <Apl_mainGoLeftWait_EvJob+0x3a>
     380:	00 00       	nop
     382:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Apl_Counter>
	_delay_ms(500);
	
	++Apl_Counter;
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Apl_Counter>
     38c:	0f 90       	pop	r0
	
	if (20u == Apl_Counter) {
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	84 31       	cpi	r24, 0x14	; 20
     396:	21 f4       	brne	.+8      	; 0x3a0 <Apl_mainGoLeftWait_EvJob+0x5a>
     398:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <Apl_FlagCom>
		Apl_FlagCom = E_OK;
     39c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <Apl_Counter>
		Apl_Counter = 0;
	}
	
	Apl_setEvt(APL_EXECUTE_EVENT_WAITGOLEFT, NULL);
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	ee c0       	rjmp	.+476    	; 0x584 <Apl_setEvt>
     3a8:	08 95       	ret

000003aa <Apl_mainGoLeftWait_entry>:
     3aa:	08 95       	ret

000003ac <Apl_mainGoLeftWait_exit>:
  * @param
  * @param
  * @retval
  */
void Apl_mainGoLeftWait_exit(void* para)
{
     3ac:	08 95       	ret

000003ae <Apl_mainGoRightWait_EvEnd>:
  * @param
  * @retval
  */
void Apl_mainGoRightWait_EvEnd(void* para)
{
	if (E_OK == Apl_FlagCom) {
     3ae:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Apl_FlagCom>
     3b2:	81 11       	cpse	r24, r1
     3b4:	1d c0       	rjmp	.+58     	; 0x3f0 <Apl_mainGoRightWait_EvEnd+0x42>
		Apl_gpioChangeState(APL_TASKLIST_IDLE, NULL);
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	a7 d0       	rcall	.+334    	; 0x50e <Apl_gpioChangeState>
		clr_LCD();
     3c0:	4e d2       	rcall	.+1180   	; 0x85e <clr_LCD>
     3c2:	60 e0       	ldi	r22, 0x00	; 0
		move_LCD(0,0);
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	2b d2       	rcall	.+1110   	; 0x81e <move_LCD>
     3c8:	80 e0       	ldi	r24, 0x00	; 0
		printf_LCD("Sts IDLE");
     3ca:	91 e0       	ldi	r25, 0x01	; 1
     3cc:	9f 93       	push	r25
     3ce:	8f 93       	push	r24
     3d0:	65 d2       	rcall	.+1226   	; 0x89c <printf_LCD>
		move_LCD(2,0);
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	23 d2       	rcall	.+1094   	; 0x81e <move_LCD>
		printf_LCD("PROGRAMMING");
     3d8:	81 e1       	ldi	r24, 0x11	; 17
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	9f 93       	push	r25
     3de:	8f 93       	push	r24
     3e0:	5d d2       	rcall	.+1210   	; 0x89c <printf_LCD>
     3e2:	81 e0       	ldi	r24, 0x01	; 1
		Apl_FlagCom = E_NOTOK;
     3e4:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Apl_FlagCom>
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	08 95       	ret

000003f2 <Apl_mainGoRightWait_EvJob>:
     3f2:	35 d2       	rcall	.+1130   	; 0x85e <clr_LCD>
  * @retval
  */
void Apl_mainGoRightWait_EvJob(void* para)
{
	clr_LCD();
	move_LCD(0,0);
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	12 d2       	rcall	.+1060   	; 0x81e <move_LCD>
	printf_LCD("Sts GO RIGHT");
     3fa:	89 e3       	ldi	r24, 0x39	; 57
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	9f 93       	push	r25
     400:	8f 93       	push	r24
     402:	4c d2       	rcall	.+1176   	; 0x89c <printf_LCD>
	move_LCD(2,0);
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0a d2       	rcall	.+1044   	; 0x81e <move_LCD>
     40a:	81 e1       	ldi	r24, 0x11	; 17
	printf_LCD("PROGRAMMING");
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	9f 93       	push	r25
     410:	8f 93       	push	r24
     412:	44 d2       	rcall	.+1160   	; 0x89c <printf_LCD>
     414:	93 b1       	in	r25, 0x03	; 3

	PORTE ^= (1<<PE5);
     416:	80 e2       	ldi	r24, 0x20	; 32
     418:	89 27       	eor	r24, r25
     41a:	83 b9       	out	0x03, r24	; 3
     41c:	2f ef       	ldi	r18, 0xFF	; 255
     41e:	8f e3       	ldi	r24, 0x3F	; 63
     420:	9b e0       	ldi	r25, 0x0B	; 11
     422:	21 50       	subi	r18, 0x01	; 1
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     42c:	00 00       	nop
     42e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Apl_Counter>
	_delay_ms(500);
	
	++Apl_Counter;
     432:	8f 5f       	subi	r24, 0xFF	; 255
     434:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Apl_Counter>
     438:	0f 90       	pop	r0
	
	if (20u == Apl_Counter) {
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	84 31       	cpi	r24, 0x14	; 20
     442:	21 f4       	brne	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     444:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <Apl_FlagCom>
		Apl_FlagCom = E_OK;
     448:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <Apl_Counter>
		Apl_Counter = 0;
	}
	
	Apl_setEvt(APL_EXECUTE_EVENT_WAITGORIGHT, NULL);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	85 e0       	ldi	r24, 0x05	; 5
     452:	98 c0       	rjmp	.+304    	; 0x584 <Apl_setEvt>
     454:	08 95       	ret

00000456 <Apl_mainGoRightWait_entry>:
     456:	08 95       	ret

00000458 <Apl_mainGoRightWait_exit>:
  * @param
  * @param
  * @retval
  */
void Apl_mainGoRightWait_exit(void* para)
{
     458:	08 95       	ret

0000045a <Apl_mainGoStraightWait_EvEnd>:
  * @param
  * @retval
  */
void Apl_mainGoStraightWait_EvEnd(void* para)
{
	if (E_OK == Apl_FlagCom) {
     45a:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <Apl_FlagCom>
     45e:	81 11       	cpse	r24, r1
     460:	1d c0       	rjmp	.+58     	; 0x49c <Apl_mainGoStraightWait_EvEnd+0x42>
		Apl_gpioChangeState(APL_TASKLIST_IDLE, NULL);
     462:	60 e0       	ldi	r22, 0x00	; 0
     464:	70 e0       	ldi	r23, 0x00	; 0
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	51 d0       	rcall	.+162    	; 0x50e <Apl_gpioChangeState>
	    clr_LCD();
     46c:	f8 d1       	rcall	.+1008   	; 0x85e <clr_LCD>
     46e:	60 e0       	ldi	r22, 0x00	; 0
		move_LCD(0,0);
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	d5 d1       	rcall	.+938    	; 0x81e <move_LCD>
     474:	80 e0       	ldi	r24, 0x00	; 0
		printf_LCD("Sts IDLE");
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	0f d2       	rcall	.+1054   	; 0x89c <printf_LCD>
		move_LCD(2,0);
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	cd d1       	rcall	.+922    	; 0x81e <move_LCD>
		printf_LCD("PROGRAMMING");
     484:	81 e1       	ldi	r24, 0x11	; 17
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	9f 93       	push	r25
     48a:	8f 93       	push	r24
     48c:	07 d2       	rcall	.+1038   	; 0x89c <printf_LCD>
     48e:	81 e0       	ldi	r24, 0x01	; 1
		
		Apl_FlagCom = E_NOTOK;
     490:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <Apl_FlagCom>
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	08 95       	ret

0000049e <Apl_mainGoStraightWait_EvJob>:
     49e:	df d1       	rcall	.+958    	; 0x85e <clr_LCD>
  * @retval
  */
void Apl_mainGoStraightWait_EvJob(void* para)
{
	clr_LCD();
	move_LCD(0,0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	bc d1       	rcall	.+888    	; 0x81e <move_LCD>
	printf_LCD("Sts GO STRAIGHT");
     4a6:	86 e4       	ldi	r24, 0x46	; 70
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	9f 93       	push	r25
     4ac:	8f 93       	push	r24
     4ae:	f6 d1       	rcall	.+1004   	; 0x89c <printf_LCD>
	move_LCD(2,0);
     4b0:	60 e0       	ldi	r22, 0x00	; 0
     4b2:	82 e0       	ldi	r24, 0x02	; 2
     4b4:	b4 d1       	rcall	.+872    	; 0x81e <move_LCD>
     4b6:	81 e1       	ldi	r24, 0x11	; 17
	printf_LCD("PROGRAMMING");
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	9f 93       	push	r25
     4bc:	8f 93       	push	r24
     4be:	ee d1       	rcall	.+988    	; 0x89c <printf_LCD>
     4c0:	93 b1       	in	r25, 0x03	; 3

	PORTE ^= (1<<PE5);
     4c2:	80 e2       	ldi	r24, 0x20	; 32
     4c4:	89 27       	eor	r24, r25
     4c6:	83 b9       	out	0x03, r24	; 3
     4c8:	93 b1       	in	r25, 0x03	; 3
    PORTE ^= (1<<PE4);
     4ca:	80 e1       	ldi	r24, 0x10	; 16
     4cc:	89 27       	eor	r24, r25
     4ce:	83 b9       	out	0x03, r24	; 3
     4d0:	2f ef       	ldi	r18, 0xFF	; 255
     4d2:	8f e3       	ldi	r24, 0x3F	; 63
     4d4:	9b e0       	ldi	r25, 0x0B	; 11
     4d6:	21 50       	subi	r18, 0x01	; 1
     4d8:	80 40       	sbci	r24, 0x00	; 0
     4da:	90 40       	sbci	r25, 0x00	; 0
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <Apl_mainGoStraightWait_EvJob+0x38>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Apl_mainGoStraightWait_EvJob+0x42>
     4e0:	00 00       	nop
     4e2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <Apl_Counter>
	_delay_ms(500);
	
	++Apl_Counter;
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <Apl_Counter>
     4ec:	0f 90       	pop	r0
	
	if (20u == Apl_Counter) {
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	84 31       	cpi	r24, 0x14	; 20
     4f6:	21 f4       	brne	.+8      	; 0x500 <Apl_mainGoStraightWait_EvJob+0x62>
     4f8:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <Apl_FlagCom>
		Apl_FlagCom = E_OK;
     4fc:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <Apl_Counter>
		Apl_Counter = 0;
	}
	
    Apl_setEvt(APL_EXECUTE_EVENT_WAITGOSTRAIGHT, NULL);
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	3e c0       	rjmp	.+124    	; 0x584 <Apl_setEvt>
     508:	08 95       	ret

0000050a <Apl_mainGoStraightWait_entry>:
     50a:	08 95       	ret

0000050c <Apl_mainGoStraightWait_exit>:
  * @param
  * @param
  * @retval
  */
void Apl_mainGoStraightWait_exit(void* para)
{
     50c:	08 95       	ret

0000050e <Apl_gpioChangeState>:
  * @param
  * @param
  * @retval
  */
void Apl_gpioChangeState(uint16 currenstate, void* para)
{
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	ec 01       	movw	r28, r24
	uint16 u2a_currentState;
	
	u2a_currentState = currenstate;
	
	if (NULL != Apl_stateMachine[u2a_currentState].evtExit) {
     514:	fc 01       	movw	r30, r24
     516:	ee 0f       	add	r30, r30
     518:	ff 1f       	adc	r31, r31
     51a:	cf 01       	movw	r24, r30
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	88 0f       	add	r24, r24
     526:	99 1f       	adc	r25, r25
     528:	e8 0f       	add	r30, r24
     52a:	f9 1f       	adc	r31, r25
     52c:	ea 5a       	subi	r30, 0xAA	; 170
     52e:	fe 4f       	sbci	r31, 0xFE	; 254
     530:	00 88       	ldd	r0, Z+16	; 0x10
     532:	f1 89       	ldd	r31, Z+17	; 0x11
     534:	e0 2d       	mov	r30, r0
     536:	30 97       	sbiw	r30, 0x00	; 0
     538:	19 f0       	breq	.+6      	; 0x540 <Apl_gpioChangeState+0x32>
		Apl_stateMachine[currenstate].evtExit(NULL);
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	09 95       	icall
	}
	
	
	if (STATE_MAXNUMBER < u2a_currentState) {
     540:	c5 30       	cpi	r28, 0x05	; 5
     542:	d1 05       	cpc	r29, r1
     544:	10 f0       	brcs	.+4      	; 0x54a <Apl_gpioChangeState+0x3c>
		u2a_currentState = APL_TASKLIST_IDLE;
     546:	c0 e0       	ldi	r28, 0x00	; 0
     548:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	Apl_gpioCurrentSts = u2a_currentState;
     54a:	c0 93 af 01 	sts	0x01AF, r28	; 0x8001af <Apl_gpioCurrentSts>
	
	if (NULL != Apl_stateMachine[u2a_currentState].evtEntry) {
     54e:	cc 0f       	add	r28, r28
     550:	dd 1f       	adc	r29, r29
     552:	ce 01       	movw	r24, r28
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	c8 0f       	add	r28, r24
     562:	d9 1f       	adc	r29, r25
     564:	ca 5a       	subi	r28, 0xAA	; 170
     566:	de 4f       	sbci	r29, 0xFE	; 254
     568:	ee 85       	ldd	r30, Y+14	; 0x0e
     56a:	ff 85       	ldd	r31, Y+15	; 0x0f
     56c:	30 97       	sbiw	r30, 0x00	; 0
     56e:	19 f0       	breq	.+6      	; 0x576 <Apl_gpioChangeState+0x68>
		Apl_stateMachine[u2a_currentState].evtEntry(NULL);
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	09 95       	icall
	}
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <Apl_getCurrentSts>:
  * @param
  * @retval
  */
uint16 Apl_getCurrentSts(void)
{
	return Apl_gpioCurrentSts;
     57c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <Apl_gpioCurrentSts>
}
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	08 95       	ret

00000584 <Apl_setEvt>:
  *         
  * @param
  * @param
  * @retval
  */
void Apl_setEvt(uint8 evtJob, void* para) {
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	c8 2f       	mov	r28, r24
     58c:	8b 01       	movw	r16, r22
	uint16 CurrentSts;
	
	MainControlSts Controller;

	CurrentSts = Apl_getCurrentSts();
     58e:	f6 df       	rcall	.-20     	; 0x57c <Apl_getCurrentSts>
	
	Controller = NULL;
	
	switch (evtJob)
     590:	4c 2f       	mov	r20, r28
     592:	50 e0       	ldi	r21, 0x00	; 0
     594:	49 30       	cpi	r20, 0x09	; 9
     596:	51 05       	cpc	r21, r1
     598:	08 f0       	brcs	.+2      	; 0x59c <Apl_setEvt+0x18>
     59a:	a6 c0       	rjmp	.+332    	; 0x6e8 <Apl_setEvt+0x164>
     59c:	fa 01       	movw	r30, r20
     59e:	ea 5b       	subi	r30, 0xBA	; 186
     5a0:	ff 4f       	sbci	r31, 0xFF	; 255
     5a2:	8c c2       	rjmp	.+1304   	; 0xabc <__tablejump2__>
	{
		case APL_EXECUTE_EVENT_GOSTRAIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtGoStraight;
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	fc 01       	movw	r30, r24
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	ee 0f       	add	r30, r30
     5b0:	ff 1f       	adc	r31, r31
     5b2:	ee 0f       	add	r30, r30
     5b4:	ff 1f       	adc	r31, r31
     5b6:	8e 0f       	add	r24, r30
     5b8:	9f 1f       	adc	r25, r31
     5ba:	fc 01       	movw	r30, r24
     5bc:	ea 5a       	subi	r30, 0xAA	; 170
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	01 90       	ld	r0, Z+
     5c2:	f0 81       	ld	r31, Z
     5c4:	e0 2d       	mov	r30, r0
			break;
     5c6:	92 c0       	rjmp	.+292    	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_WAITGOSTRAIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtWaitGoStraight;
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	fc 01       	movw	r30, r24
     5ce:	ee 0f       	add	r30, r30
     5d0:	ff 1f       	adc	r31, r31
     5d2:	ee 0f       	add	r30, r30
     5d4:	ff 1f       	adc	r31, r31
     5d6:	ee 0f       	add	r30, r30
     5d8:	ff 1f       	adc	r31, r31
     5da:	8e 0f       	add	r24, r30
     5dc:	9f 1f       	adc	r25, r31
     5de:	fc 01       	movw	r30, r24
     5e0:	ea 5a       	subi	r30, 0xAA	; 170
     5e2:	fe 4f       	sbci	r31, 0xFE	; 254
     5e4:	02 80       	ldd	r0, Z+2	; 0x02
     5e6:	f3 81       	ldd	r31, Z+3	; 0x03
     5e8:	e0 2d       	mov	r30, r0
			break;
     5ea:	80 c0       	rjmp	.+256    	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_GOLEFT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtGoLeft;
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	fc 01       	movw	r30, r24
     5f2:	ee 0f       	add	r30, r30
     5f4:	ff 1f       	adc	r31, r31
     5f6:	ee 0f       	add	r30, r30
     5f8:	ff 1f       	adc	r31, r31
     5fa:	ee 0f       	add	r30, r30
     5fc:	ff 1f       	adc	r31, r31
     5fe:	8e 0f       	add	r24, r30
     600:	9f 1f       	adc	r25, r31
     602:	fc 01       	movw	r30, r24
     604:	ea 5a       	subi	r30, 0xAA	; 170
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	04 80       	ldd	r0, Z+4	; 0x04
     60a:	f5 81       	ldd	r31, Z+5	; 0x05
     60c:	e0 2d       	mov	r30, r0
			break;
     60e:	6e c0       	rjmp	.+220    	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_WAITGOLEFT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtWaitGoLeft;
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	fc 01       	movw	r30, r24
     616:	ee 0f       	add	r30, r30
     618:	ff 1f       	adc	r31, r31
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	ee 0f       	add	r30, r30
     620:	ff 1f       	adc	r31, r31
     622:	8e 0f       	add	r24, r30
     624:	9f 1f       	adc	r25, r31
     626:	fc 01       	movw	r30, r24
     628:	ea 5a       	subi	r30, 0xAA	; 170
     62a:	fe 4f       	sbci	r31, 0xFE	; 254
     62c:	06 80       	ldd	r0, Z+6	; 0x06
     62e:	f7 81       	ldd	r31, Z+7	; 0x07
     630:	e0 2d       	mov	r30, r0
			break;
     632:	5c c0       	rjmp	.+184    	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_GORIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtGoRight;
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	fc 01       	movw	r30, r24
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	8e 0f       	add	r24, r30
     648:	9f 1f       	adc	r25, r31
     64a:	fc 01       	movw	r30, r24
     64c:	ea 5a       	subi	r30, 0xAA	; 170
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	00 84       	ldd	r0, Z+8	; 0x08
     652:	f1 85       	ldd	r31, Z+9	; 0x09
     654:	e0 2d       	mov	r30, r0
			break;
     656:	4a c0       	rjmp	.+148    	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_WAITGORIGHT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtWaitGoRigth;
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	fc 01       	movw	r30, r24
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	8e 0f       	add	r24, r30
     66c:	9f 1f       	adc	r25, r31
     66e:	fc 01       	movw	r30, r24
     670:	ea 5a       	subi	r30, 0xAA	; 170
     672:	fe 4f       	sbci	r31, 0xFE	; 254
     674:	02 84       	ldd	r0, Z+10	; 0x0a
     676:	f3 85       	ldd	r31, Z+11	; 0x0b
     678:	e0 2d       	mov	r30, r0
			break;
     67a:	38 c0       	rjmp	.+112    	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_COM:
		{
			Controller = Apl_stateMachine[CurrentSts].evtJob;
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	fc 01       	movw	r30, r24
     682:	ee 0f       	add	r30, r30
     684:	ff 1f       	adc	r31, r31
     686:	ee 0f       	add	r30, r30
     688:	ff 1f       	adc	r31, r31
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	8e 0f       	add	r24, r30
     690:	9f 1f       	adc	r25, r31
     692:	fc 01       	movw	r30, r24
     694:	ea 5a       	subi	r30, 0xAA	; 170
     696:	fe 4f       	sbci	r31, 0xFE	; 254
     698:	04 84       	ldd	r0, Z+12	; 0x0c
     69a:	f5 85       	ldd	r31, Z+13	; 0x0d
     69c:	e0 2d       	mov	r30, r0
			break;
     69e:	26 c0       	rjmp	.+76     	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_ENTRY:
		{
			Controller = Apl_stateMachine[CurrentSts].evtEntry;
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	fc 01       	movw	r30, r24
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	ee 0f       	add	r30, r30
     6b0:	ff 1f       	adc	r31, r31
     6b2:	8e 0f       	add	r24, r30
     6b4:	9f 1f       	adc	r25, r31
     6b6:	fc 01       	movw	r30, r24
     6b8:	ea 5a       	subi	r30, 0xAA	; 170
     6ba:	fe 4f       	sbci	r31, 0xFE	; 254
     6bc:	06 84       	ldd	r0, Z+14	; 0x0e
     6be:	f7 85       	ldd	r31, Z+15	; 0x0f
     6c0:	e0 2d       	mov	r30, r0
			break;
     6c2:	14 c0       	rjmp	.+40     	; 0x6ec <Apl_setEvt+0x168>
		}
		case APL_EXECUTE_EVENT_EXIT:
		{
			Controller = Apl_stateMachine[CurrentSts].evtExit;
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	fc 01       	movw	r30, r24
     6ca:	ee 0f       	add	r30, r30
     6cc:	ff 1f       	adc	r31, r31
     6ce:	ee 0f       	add	r30, r30
     6d0:	ff 1f       	adc	r31, r31
     6d2:	ee 0f       	add	r30, r30
     6d4:	ff 1f       	adc	r31, r31
     6d6:	8e 0f       	add	r24, r30
     6d8:	9f 1f       	adc	r25, r31
     6da:	fc 01       	movw	r30, r24
     6dc:	ea 5a       	subi	r30, 0xAA	; 170
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	00 88       	ldd	r0, Z+16	; 0x10
     6e2:	f1 89       	ldd	r31, Z+17	; 0x11
     6e4:	e0 2d       	mov	r30, r0
			break;
     6e6:	02 c0       	rjmp	.+4      	; 0x6ec <Apl_setEvt+0x168>
	
	MainControlSts Controller;

	CurrentSts = Apl_getCurrentSts();
	
	Controller = NULL;
     6e8:	e0 e0       	ldi	r30, 0x00	; 0
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
		default:
			break;
		
	}

	if (NULL != Controller) {
     6ec:	30 97       	sbiw	r30, 0x00	; 0
     6ee:	11 f0       	breq	.+4      	; 0x6f4 <Apl_setEvt+0x170>
		Controller(para);
     6f0:	c8 01       	movw	r24, r16
     6f2:	09 95       	icall
	}
}
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	08 95       	ret

000006fc <Apl_mainIdle_EvReqGoStraight>:
  * @param
  * @retval
  */
void Apl_mainIdle_EvReqGoStraight(void* para)
{
	Apl_gpioChangeState(APL_TASKLIST_GOSTRAIGHT, NULL);
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	04 cf       	rjmp	.-504    	; 0x50e <Apl_gpioChangeState>
     706:	08 95       	ret

00000708 <Apl_mainIdle_EvReqGoLeft>:
  * @param
  * @retval
  */
void Apl_mainIdle_EvReqGoLeft(void* para)
{
	Apl_gpioChangeState(APL_TASKLIST_GOLEFT, NULL);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	fe ce       	rjmp	.-516    	; 0x50e <Apl_gpioChangeState>
     712:	08 95       	ret

00000714 <Apl_mainIdle_EvReqGoRight>:
  * @param
  * @retval
  */
void Apl_mainIdle_EvReqGoRight(void* para)
{
	Apl_gpioChangeState(APL_TASKLIST_GORIGHT, NULL);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	f8 ce       	rjmp	.-528    	; 0x50e <Apl_gpioChangeState>
     71e:	08 95       	ret

00000720 <Apl_mainIdle_EvJob>:
  * @param
  * @param
  * @retval
  */
void Apl_mainIdle_EvJob(void* para)
{
     720:	08 95       	ret

00000722 <Apl_mainIdle_entry>:
  * @param
  * @param
  * @retval
  */
void Apl_mainIdle_entry(void* para)
{
     722:	08 95       	ret

00000724 <Apl_mainIdle_exit>:
  * @param
  * @param
  * @retval
  */
void Apl_mainIdle_exit(void* para)
{
     724:	08 95       	ret

00000726 <Apl_UART_RECEIVE>:
#include "Apl_uartFFSend.h"
#include <string.h>

void Apl_UART_RECEIVE(UART_Struct *buffer)
{
    UART1_RxString(buffer->Apl_BufferRead);
     726:	bc 01       	movw	r22, r24
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	47 c1       	rjmp	.+654    	; 0x9ba <UART_RxString>
     72c:	08 95       	ret

0000072e <Read2Nib>:
  #ifdef LCD8BIT
  Write8Bit(0x02);
  wait_LCD();
  #else
  Write2Nib(0x02);
  wait_LCD();
     72e:	8b b3       	in	r24, 0x1b	; 27
     730:	80 6f       	ori	r24, 0xF0	; 240
     732:	8b bb       	out	0x1b, r24	; 27
     734:	8a b3       	in	r24, 0x1a	; 26
     736:	8f 70       	andi	r24, 0x0F	; 15
     738:	8a bb       	out	0x1a, r24	; 26
     73a:	8b b3       	in	r24, 0x1b	; 27
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	8b bb       	out	0x1b, r24	; 27
     740:	8b b3       	in	r24, 0x1b	; 27
     742:	84 60       	ori	r24, 0x04	; 4
     744:	8b bb       	out	0x1b, r24	; 27
     746:	99 b3       	in	r25, 0x19	; 25
     748:	90 7f       	andi	r25, 0xF0	; 240
     74a:	8b b3       	in	r24, 0x1b	; 27
     74c:	8b 7f       	andi	r24, 0xFB	; 251
     74e:	8b bb       	out	0x1b, r24	; 27
     750:	8b b3       	in	r24, 0x1b	; 27
     752:	84 60       	ori	r24, 0x04	; 4
     754:	8b bb       	out	0x1b, r24	; 27
     756:	8b b3       	in	r24, 0x1b	; 27
     758:	84 60       	ori	r24, 0x04	; 4
     75a:	8b bb       	out	0x1b, r24	; 27
     75c:	89 b3       	in	r24, 0x19	; 25
     75e:	2b b3       	in	r18, 0x1b	; 27
     760:	2b 7f       	andi	r18, 0xFB	; 251
     762:	2b bb       	out	0x1b, r18	; 27
     764:	82 95       	swap	r24
     766:	8f 70       	andi	r24, 0x0F	; 15
     768:	89 2b       	or	r24, r25
     76a:	08 95       	ret

0000076c <Write2Nib>:
     76c:	2b b3       	in	r18, 0x1b	; 27
     76e:	2f 70       	andi	r18, 0x0F	; 15
     770:	38 2f       	mov	r19, r24
     772:	30 7f       	andi	r19, 0xF0	; 240
     774:	40 e1       	ldi	r20, 0x10	; 16
     776:	84 9f       	mul	r24, r20
     778:	c0 01       	movw	r24, r0
     77a:	11 24       	eor	r1, r1
     77c:	92 2f       	mov	r25, r18
     77e:	93 2b       	or	r25, r19
     780:	9b bb       	out	0x1b, r25	; 27
     782:	9b b3       	in	r25, 0x1b	; 27
     784:	94 60       	ori	r25, 0x04	; 4
     786:	9b bb       	out	0x1b, r25	; 27
     788:	9b b3       	in	r25, 0x1b	; 27
     78a:	9b 7f       	andi	r25, 0xFB	; 251
     78c:	9b bb       	out	0x1b, r25	; 27
     78e:	82 2b       	or	r24, r18
     790:	8b bb       	out	0x1b, r24	; 27
     792:	8b b3       	in	r24, 0x1b	; 27
     794:	84 60       	ori	r24, 0x04	; 4
     796:	8b bb       	out	0x1b, r24	; 27
     798:	8b b3       	in	r24, 0x1b	; 27
     79a:	8b 7f       	andi	r24, 0xFB	; 251
     79c:	8b bb       	out	0x1b, r24	; 27
     79e:	08 95       	ret

000007a0 <wait_LCD>:
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	1f 92       	push	r1
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	8b b3       	in	r24, 0x1b	; 27
     7ac:	8e 7f       	andi	r24, 0xFE	; 254
     7ae:	8b bb       	out	0x1b, r24	; 27
     7b0:	8b b3       	in	r24, 0x1b	; 27
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	8b bb       	out	0x1b, r24	; 27
     7b6:	bb df       	rcall	.-138    	; 0x72e <Read2Nib>
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	88 23       	and	r24, r24
     7be:	ac f3       	brlt	.-22     	; 0x7aa <wait_LCD+0xa>
     7c0:	8b b3       	in	r24, 0x1b	; 27
     7c2:	8d 7f       	andi	r24, 0xFD	; 253
     7c4:	8b bb       	out	0x1b, r24	; 27
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	8a bb       	out	0x1a, r24	; 26
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <init_LCD>:
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	8a bb       	out	0x1a, r24	; 26
     7d6:	8a bb       	out	0x1a, r24	; 26
     7d8:	8b b3       	in	r24, 0x1b	; 27
     7da:	8e 7f       	andi	r24, 0xFE	; 254
     7dc:	8b bb       	out	0x1b, r24	; 27
     7de:	8b b3       	in	r24, 0x1b	; 27
     7e0:	8d 7f       	andi	r24, 0xFD	; 253
     7e2:	8b bb       	out	0x1b, r24	; 27
     7e4:	8b b3       	in	r24, 0x1b	; 27
     7e6:	8b 7f       	andi	r24, 0xFB	; 251
     7e8:	8b bb       	out	0x1b, r24	; 27
     7ea:	8b b3       	in	r24, 0x1b	; 27
     7ec:	84 60       	ori	r24, 0x04	; 4
     7ee:	8b bb       	out	0x1b, r24	; 27
     7f0:	8b b3       	in	r24, 0x1b	; 27
     7f2:	80 62       	ori	r24, 0x20	; 32
     7f4:	8b bb       	out	0x1b, r24	; 27
     7f6:	8b b3       	in	r24, 0x1b	; 27
     7f8:	8b 7f       	andi	r24, 0xFB	; 251
     7fa:	8b bb       	out	0x1b, r24	; 27
     7fc:	d1 df       	rcall	.-94     	; 0x7a0 <wait_LCD>
     7fe:	88 e2       	ldi	r24, 0x28	; 40
     800:	b5 df       	rcall	.-150    	; 0x76c <Write2Nib>
     802:	ce df       	rcall	.-100    	; 0x7a0 <wait_LCD>
     804:	8b b3       	in	r24, 0x1b	; 27
     806:	8e 7f       	andi	r24, 0xFE	; 254
     808:	8b bb       	out	0x1b, r24	; 27
     80a:	8e e0       	ldi	r24, 0x0E	; 14
     80c:	af df       	rcall	.-162    	; 0x76c <Write2Nib>
     80e:	c8 df       	rcall	.-112    	; 0x7a0 <wait_LCD>
     810:	8b b3       	in	r24, 0x1b	; 27
     812:	8e 7f       	andi	r24, 0xFE	; 254
     814:	8b bb       	out	0x1b, r24	; 27
     816:	86 e0       	ldi	r24, 0x06	; 6
     818:	a9 df       	rcall	.-174    	; 0x76c <Write2Nib>
     81a:	c2 cf       	rjmp	.-124    	; 0x7a0 <wait_LCD>
     81c:	08 95       	ret

0000081e <move_LCD>:
 */
void move_LCD(uint8_t y,uint8_t x)
{
  uint8_t Ad;
  
  if (x == 0) {
     81e:	66 23       	and	r22, r22
     820:	19 f0       	breq	.+6      	; 0x828 <move_LCD+0xa>
	  x = 1;
  } else if (x > 16) {
     822:	61 31       	cpi	r22, 0x11	; 17
     824:	18 f4       	brcc	.+6      	; 0x82c <move_LCD+0xe>
     826:	03 c0       	rjmp	.+6      	; 0x82e <move_LCD+0x10>
void move_LCD(uint8_t y,uint8_t x)
{
  uint8_t Ad;
  
  if (x == 0) {
	  x = 1;
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	01 c0       	rjmp	.+2      	; 0x82e <move_LCD+0x10>
  } else if (x > 16) {
	  x = 16;
     82c:	60 e1       	ldi	r22, 0x10	; 16
  } else {
	  /* Do nothing */
  }
  
  if (y == 0) {
     82e:	88 23       	and	r24, r24
     830:	19 f0       	breq	.+6      	; 0x838 <move_LCD+0x1a>
	  y = 1;
  } else if (y > 2) {
     832:	83 30       	cpi	r24, 0x03	; 3
     834:	18 f4       	brcc	.+6      	; 0x83c <move_LCD+0x1e>
     836:	03 c0       	rjmp	.+6      	; 0x83e <move_LCD+0x20>
  } else {
	  /* Do nothing */
  }
  
  if (y == 0) {
	  y = 1;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	01 c0       	rjmp	.+2      	; 0x83e <move_LCD+0x20>
  } else if (y > 2) {
	  y = 2;
     83c:	82 e0       	ldi	r24, 0x02	; 2
  } else {
	  /* Do nothing */
  }
  
  Ad = 64*(y-1)+(x-1)+0x80; //
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	21 50       	subi	r18, 0x01	; 1
     844:	31 09       	sbc	r19, r1
     846:	86 2f       	mov	r24, r22
     848:	90 e4       	ldi	r25, 0x40	; 64
     84a:	29 9f       	mul	r18, r25
     84c:	80 0d       	add	r24, r0
     84e:	11 24       	eor	r1, r1
  cbi(CTRL,RS); // the following data is COMMAND
     850:	9b b3       	in	r25, 0x1b	; 27
     852:	9e 7f       	andi	r25, 0xFE	; 254
     854:	9b bb       	out	0x1b, r25	; 27
  #ifdef LCD8BIT
  Write8Bit(Ad);
  wait_LCD();
  #else
  Write2Nib(Ad);
     856:	81 58       	subi	r24, 0x81	; 129
     858:	89 df       	rcall	.-238    	; 0x76c <Write2Nib>
  wait_LCD();
     85a:	a2 cf       	rjmp	.-188    	; 0x7a0 <wait_LCD>
     85c:	08 95       	ret

0000085e <clr_LCD>:
     85e:	8b b3       	in	r24, 0x1b	; 27
/*
 *  Clear the LCD
 */
void clr_LCD(void)
{
  cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
     860:	8e 7f       	andi	r24, 0xFE	; 254
     862:	8b bb       	out	0x1b, r24	; 27
  #ifdef LCD8BIT
  Write8Bit(0x01);
  wait_LCD();
  #else
  Write2Nib(0x01);
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	82 df       	rcall	.-252    	; 0x76c <Write2Nib>
  wait_LCD();
     868:	9b cf       	rjmp	.-202    	; 0x7a0 <wait_LCD>
     86a:	08 95       	ret

0000086c <putChar_LCD>:
     86c:	9b b3       	in	r25, 0x1b	; 27
/*
 *  Put char on the LCD
 */
void putChar_LCD(uint8_t chr)
{
  sbi(CTRL,RS); //this is a normal DATA
     86e:	91 60       	ori	r25, 0x01	; 1
     870:	9b bb       	out	0x1b, r25	; 27
  #ifdef LCD8BIT
  Write8Bit(chr);
  wait_LCD();
  #else
  Write2Nib(chr);
     872:	7c df       	rcall	.-264    	; 0x76c <Write2Nib>
  wait_LCD();
     874:	95 cf       	rjmp	.-214    	; 0x7a0 <wait_LCD>
     876:	08 95       	ret

00000878 <putStr_LCD>:
     878:	0f 93       	push	r16

/*
 *  Put string on the LCD
 */
void putStr_LCD(const char* str)
{
     87a:	1f 93       	push	r17
     87c:	cf 93       	push	r28
     87e:	8c 01       	movw	r16, r24
  unsigned char i;
  for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);
     880:	c0 e0       	ldi	r28, 0x00	; 0
     882:	02 c0       	rjmp	.+4      	; 0x888 <putStr_LCD+0x10>
     884:	f3 df       	rcall	.-26     	; 0x86c <putChar_LCD>
     886:	cf 5f       	subi	r28, 0xFF	; 255
     888:	f8 01       	movw	r30, r16
     88a:	ec 0f       	add	r30, r28
     88c:	f1 1d       	adc	r31, r1
     88e:	80 81       	ld	r24, Z
     890:	81 11       	cpse	r24, r1
     892:	f8 cf       	rjmp	.-16     	; 0x884 <putStr_LCD+0xc>
}
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	08 95       	ret

0000089c <printf_LCD>:

/*
 *  Print standard C printf format string on the LCD
 */
void printf_LCD(const char *format, ...)
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	9e 01       	movw	r18, r28
     8a6:	2b 5f       	subi	r18, 0xFB	; 251
     8a8:	3f 4f       	sbci	r19, 0xFF	; 255
     8aa:	f9 01       	movw	r30, r18
     8ac:	41 91       	ld	r20, Z+
     8ae:	51 91       	ld	r21, Z+
     8b0:	9f 01       	movw	r18, r30
  static char lcd_buffer[LCD_NO_COLS + 1];
  va_list args;

  va_start(args, format);
  vsnprintf(lcd_buffer, LCD_NO_COLS + 1, format, args);
     8b2:	61 e1       	ldi	r22, 0x11	; 17
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	8e e9       	ldi	r24, 0x9E	; 158
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	09 d1       	rcall	.+530    	; 0xace <vsnprintf>
  va_end(args);

  putStr_LCD(lcd_buffer);
     8bc:	8e e9       	ldi	r24, 0x9E	; 158
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	db df       	rcall	.-74     	; 0x878 <putStr_LCD>
}
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <IO_Init>:
static void IO_Init();
//static void LCD_Init(LiquidCrystalDevice_t* module);
static void f_uartInit(void);

static void IO_Init(){
	DDRE |= (1 << PE4) | (1 << PE5);
     8c8:	82 b1       	in	r24, 0x02	; 2
     8ca:	80 63       	ori	r24, 0x30	; 48
     8cc:	82 b9       	out	0x02, r24	; 2
	PORTE &= ~((1 << PE4) | (1 << PE5));
     8ce:	83 b1       	in	r24, 0x03	; 3
     8d0:	8f 7c       	andi	r24, 0xCF	; 207
     8d2:	83 b9       	out	0x03, r24	; 3
     8d4:	08 95       	ret

000008d6 <f_uartInit>:
// 	*module = lq_init(0x27, 16, 2, LCD_5x8DOTS);
// 	lq_turnOnBacklight(module);
// }

static void f_uartInit(void) {
	UART1_Init(9600);
     8d6:	40 e8       	ldi	r20, 0x80	; 128
     8d8:	55 e2       	ldi	r21, 0x25	; 37
     8da:	60 e0       	ldi	r22, 0x00	; 0
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <UART_Init>
     8e2:	08 95       	ret

000008e4 <BSW_driverInit>:
}

void BSW_driverInit(void)
{
	//WDT_Init(TIMEOUT_1S);
	f_uartInit();
     8e4:	f8 df       	rcall	.-16     	; 0x8d6 <f_uartInit>
	IO_Init();
     8e6:	f0 df       	rcall	.-32     	; 0x8c8 <IO_Init>
	//LCD_Init(&device);
	init_LCD();
     8e8:	74 cf       	rjmp	.-280    	; 0x7d2 <init_LCD>
     8ea:	08 95       	ret

000008ec <main>:
     8ec:	35 dc       	rcall	.-1942   	; 0x158 <Apl_Init>
#include <Apl_Init.h>

int main(void) {
	
	Apl_Init();
	PORTE |= (1<<PE4);
     8ee:	83 b1       	in	r24, 0x03	; 3
     8f0:	80 61       	ori	r24, 0x10	; 16
	
	while(1) {
		Apl_mainTask();
     8f2:	83 b9       	out	0x03, r24	; 3
     8f4:	d6 dc       	rcall	.-1620   	; 0x2a2 <Apl_mainTask>
     8f6:	fe cf       	rjmp	.-4      	; 0x8f4 <main+0x8>

000008f8 <UART_SetBaudRate>:



}
void UART_SetBaudRate(uint8 var_uartChannel_u8, uint32 var_baudRate_u32)
{
     8f8:	cf 93       	push	r28
     8fa:	c8 2f       	mov	r28, r24
    uint16 RegValue;
    if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
     8fc:	db 01       	movw	r26, r22
     8fe:	ca 01       	movw	r24, r20
     900:	80 56       	subi	r24, 0x60	; 96
     902:	99 40       	sbci	r25, 0x09	; 9
     904:	a1 09       	sbc	r26, r1
     906:	b1 09       	sbc	r27, r1
     908:	81 3a       	cpi	r24, 0xA1	; 161
     90a:	98 4b       	sbci	r25, 0xB8	; 184
     90c:	a1 40       	sbci	r26, 0x01	; 1
     90e:	b1 05       	cpc	r27, r1
     910:	d0 f4       	brcc	.+52     	; 0x946 <UART_SetBaudRate+0x4e>
    {
        RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
     912:	44 0f       	add	r20, r20
     914:	55 1f       	adc	r21, r21
     916:	66 1f       	adc	r22, r22
     918:	77 1f       	adc	r23, r23
     91a:	44 0f       	add	r20, r20
     91c:	55 1f       	adc	r21, r21
     91e:	66 1f       	adc	r22, r22
     920:	77 1f       	adc	r23, r23
     922:	9a 01       	movw	r18, r20
     924:	ab 01       	movw	r20, r22
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	44 1f       	adc	r20, r20
     92c:	55 1f       	adc	r21, r21
     92e:	22 0f       	add	r18, r18
     930:	33 1f       	adc	r19, r19
     932:	44 1f       	adc	r20, r20
     934:	55 1f       	adc	r21, r21
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	70 e8       	ldi	r23, 0x80	; 128
     93a:	80 e7       	ldi	r24, 0x70	; 112
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	9c d0       	rcall	.+312    	; 0xa78 <__udivmodsi4>
     940:	21 50       	subi	r18, 0x01	; 1
     942:	31 09       	sbc	r19, r1
     944:	02 c0       	rjmp	.+4      	; 0x94a <UART_SetBaudRate+0x52>
    }
    else
    {
        RegValue = M_GetBaudRateGeneratorValue(9600);
     946:	26 e4       	ldi	r18, 0x46	; 70
     948:	31 e0       	ldi	r19, 0x01	; 1
    }
    switch(var_uartChannel_u8)
     94a:	cc 23       	and	r28, r28
     94c:	19 f0       	breq	.+6      	; 0x954 <UART_SetBaudRate+0x5c>
     94e:	c1 30       	cpi	r28, 0x01	; 1
     950:	29 f0       	breq	.+10     	; 0x95c <UART_SetBaudRate+0x64>
     952:	08 c0       	rjmp	.+16     	; 0x964 <UART_SetBaudRate+0x6c>
    {
    case 0:
        UBRR0L = util_ExtractByte0to8(RegValue);
     954:	29 b9       	out	0x09, r18	; 9
        UBRR0H = util_ExtractByte8to16(RegValue);
     956:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
        break;
     95a:	04 c0       	rjmp	.+8      	; 0x964 <UART_SetBaudRate+0x6c>
    case 1:
        UBRR1L = util_ExtractByte0to8(RegValue);
     95c:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
        UBRR1H = util_ExtractByte8to16(RegValue);
     960:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
        break;
    }  



}
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <UART_Init>:
#define C_MaxUartChannels_U8 2u
#define C_UartOne_U8         1u

void UART_Init(uint8 var_uartChannel_u8, uint32 var_baudRate_u32)
{    
    switch(var_uartChannel_u8)
     968:	88 23       	and	r24, r24
     96a:	19 f0       	breq	.+6      	; 0x972 <UART_Init+0xa>
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	49 f0       	breq	.+18     	; 0x982 <UART_Init+0x1a>
     970:	08 95       	ret
    {
    case 0:
	
        UCSR0B= (1<<RXEN) | (1<<TXEN);                  
     972:	98 e1       	ldi	r25, 0x18	; 24
     974:	9a b9       	out	0x0a, r25	; 10
        UCSR0C = (0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0); 
     976:	96 e0       	ldi	r25, 0x06	; 6
     978:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
        UCSR0A= 0x00;                                   
     97c:	1b b8       	out	0x0b, r1	; 11
        UART_SetBaudRate(var_uartChannel_u8,var_baudRate_u32);
     97e:	bc cf       	rjmp	.-136    	; 0x8f8 <UART_SetBaudRate>
        break;
     980:	08 95       	ret


    case 1:
	    
        UCSR1B= (1<<RXEN) | (1<<TXEN);                 
     982:	98 e1       	ldi	r25, 0x18	; 24
     984:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
        UCSR1C= (1<<UCSZ1) | (1<<UCSZ0);   
     988:	96 e0       	ldi	r25, 0x06	; 6
     98a:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
        UCSR1A= 0x00;                                   
     98e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
        UART_SetBaudRate(var_uartChannel_u8,var_baudRate_u32);
     992:	b2 cf       	rjmp	.-156    	; 0x8f8 <UART_SetBaudRate>
     994:	08 95       	ret

00000996 <UART_RxChar>:
{
    uint8 s1a_data;
	
	s1a_data = 0; 

    switch(var_uartChannel_u8)
     996:	88 23       	and	r24, r24
     998:	19 f0       	breq	.+6      	; 0x9a0 <UART_RxChar+0xa>
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	29 f0       	breq	.+10     	; 0x9a8 <UART_RxChar+0x12>
     99e:	0b c0       	rjmp	.+22     	; 0x9b6 <UART_RxChar+0x20>
    {
    case 0:
        while(util_IsBitCleared(UCSR0A,RXC));  
     9a0:	5f 9b       	sbis	0x0b, 7	; 11
     9a2:	fe cf       	rjmp	.-4      	; 0x9a0 <UART_RxChar+0xa>
        s1a_data = UDR0;
     9a4:	8c b1       	in	r24, 0x0c	; 12

        break;
     9a6:	08 95       	ret


    case 1:
        while(util_IsBitCleared(UCSR1A,RXC));  
     9a8:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     9ac:	88 23       	and	r24, r24
     9ae:	e4 f7       	brge	.-8      	; 0x9a8 <UART_RxChar+0x12>
        s1a_data = UDR1;
     9b0:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
        break;
     9b4:	08 95       	ret

uint8 UART_RxChar(uint8 var_uartChannel_u8)
{
    uint8 s1a_data;
	
	s1a_data = 0; 
     9b6:	80 e0       	ldi	r24, 0x00	; 0
        s1a_data = UDR1;
        break;

    }
    return s1a_data;    
}
     9b8:	08 95       	ret

000009ba <UART_RxString>:
#endif

#if (Enable_UART_RxString==1)

void UART_RxString(uint8 var_uartChannel_u8, uint8 *ptr_stringPointer_u8)
{
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	18 2f       	mov	r17, r24
     9c2:	eb 01       	movw	r28, r22
	uint8 u1a_data;
	
	while(1) {
		/* Get data into register */
		u1a_data = UART_RxChar(var_uartChannel_u8);
     9c4:	81 2f       	mov	r24, r17
     9c6:	e7 df       	rcall	.-50     	; 0x996 <UART_RxChar>

		/* Check end of buffer */
		if(('\r' == u1a_data) || ('\n' == u1a_data)) {
     9c8:	8d 30       	cpi	r24, 0x0D	; 13
     9ca:	11 f0       	breq	.+4      	; 0x9d0 <UART_RxString+0x16>
     9cc:	8a 30       	cpi	r24, 0x0A	; 10
     9ce:	11 f4       	brne	.+4      	; 0x9d4 <UART_RxString+0x1a>
			/* Clear the current buffer */
			*ptr_stringPointer_u8 = 0;
     9d0:	18 82       	st	Y, r1
		/* Update data to buffer */
		*ptr_stringPointer_u8 = u1a_data;
		/* The next address */
		ptr_stringPointer_u8++;
	}
}
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <UART_RxString+0x1e>
			*ptr_stringPointer_u8 = 0;
			break;
		}
		
		/* Update data to buffer */
		*ptr_stringPointer_u8 = u1a_data;
     9d4:	89 93       	st	Y+, r24
		/* The next address */
		ptr_stringPointer_u8++;
	}
     9d6:	f6 cf       	rjmp	.-20     	; 0x9c4 <UART_RxString+0xa>
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	08 95       	ret

000009e0 <UDS_SID10changeSession>:
#include "UDS_wModeUser_SID10.h"
#include "Apl_Public_Variable.h"
#include "avr/io.h"

void UDS_SID10changeSession(uint8 *para) {
	switch (*para) {
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	81 35       	cpi	r24, 0x51	; 81
     9e6:	59 f0       	breq	.+22     	; 0x9fe <UDS_SID10changeSession+0x1e>
     9e8:	82 35       	cpi	r24, 0x52	; 82
     9ea:	81 f0       	breq	.+32     	; 0xa0c <UDS_SID10changeSession+0x2c>
     9ec:	80 35       	cpi	r24, 0x50	; 80
     9ee:	a1 f4       	brne	.+40     	; 0xa18 <UDS_SID10changeSession+0x38>
		case 0x50: {
			ControllerUnit->Session = 0x01u;
     9f0:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     9f4:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	87 83       	std	Z+7, r24	; 0x07
			break;
     9fc:	08 95       	ret
		}
		case 0x51: {
			ControllerUnit->Session = 0x02u;
     9fe:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     a02:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	87 83       	std	Z+7, r24	; 0x07
			break;
     a0a:	08 95       	ret
		}
		case 0x52: {
			ControllerUnit->Session = 0x03u;
     a0c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     a10:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	87 83       	std	Z+7, r24	; 0x07
     a18:	08 95       	ret

00000a1a <shutdown>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
     a1a:	9e e0       	ldi	r25, 0x0E	; 14
     a1c:	88 e1       	ldi	r24, 0x18	; 24
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	a8 95       	wdr
     a24:	81 bd       	out	0x21, r24	; 33
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	91 bd       	out	0x21, r25	; 33
     a2a:	ff cf       	rjmp	.-2      	; 0xa2a <shutdown+0x10>

00000a2c <UDS_SID14changeRequest>:

#include "UDS_wModeUser_SID14.h"
#include "avr/io.h"

void UDS_SID14changeRequest(uint8 *para) {
	switch (*para) {
     a2c:	fc 01       	movw	r30, r24
     a2e:	80 81       	ld	r24, Z
     a30:	81 33       	cpi	r24, 0x31	; 49
     a32:	71 f0       	breq	.+28     	; 0xa50 <UDS_SID14changeRequest+0x24>
     a34:	82 33       	cpi	r24, 0x32	; 50
     a36:	b1 f0       	breq	.+44     	; 0xa64 <UDS_SID14changeRequest+0x38>
     a38:	80 33       	cpi	r24, 0x30	; 48
     a3a:	e9 f4       	brne	.+58     	; 0xa76 <UDS_SID14changeRequest+0x4a>
		case 0x30: {
			if (APL_PRO_SESSION == ControllerUnit->Session) {
     a3c:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     a40:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     a44:	87 81       	ldd	r24, Z+7	; 0x07
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	b1 f4       	brne	.+44     	; 0xa76 <UDS_SID14changeRequest+0x4a>
				ControllerUnit->goStraight = ARG_TRUE;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	84 83       	std	Z+4, r24	; 0x04
     a4e:	08 95       	ret
			}
			break;
		}
		case 0x31: {
			if (APL_PRO_SESSION == ControllerUnit->Session) {
     a50:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     a54:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     a58:	87 81       	ldd	r24, Z+7	; 0x07
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	61 f4       	brne	.+24     	; 0xa76 <UDS_SID14changeRequest+0x4a>
				ControllerUnit->goRight = ARG_TRUE;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	86 83       	std	Z+6, r24	; 0x06
     a62:	08 95       	ret
			}
			break;
		}
		case 0x32: {
			if (APL_EXTEND_SESSION == ControllerUnit->Session) {
     a64:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <ControllerUnit>
     a68:	f0 91 b1 01 	lds	r31, 0x01B1	; 0x8001b1 <ControllerUnit+0x1>
     a6c:	87 81       	ldd	r24, Z+7	; 0x07
     a6e:	83 30       	cpi	r24, 0x03	; 3
     a70:	11 f4       	brne	.+4      	; 0xa76 <UDS_SID14changeRequest+0x4a>
				ControllerUnit->goLeft = ARG_TRUE;
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	85 83       	std	Z+5, r24	; 0x05
     a76:	08 95       	ret

00000a78 <__udivmodsi4>:
     a78:	a1 e2       	ldi	r26, 0x21	; 33
     a7a:	1a 2e       	mov	r1, r26
     a7c:	aa 1b       	sub	r26, r26
     a7e:	bb 1b       	sub	r27, r27
     a80:	fd 01       	movw	r30, r26
     a82:	0d c0       	rjmp	.+26     	; 0xa9e <__udivmodsi4_ep>

00000a84 <__udivmodsi4_loop>:
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	ee 1f       	adc	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	a2 17       	cp	r26, r18
     a8e:	b3 07       	cpc	r27, r19
     a90:	e4 07       	cpc	r30, r20
     a92:	f5 07       	cpc	r31, r21
     a94:	20 f0       	brcs	.+8      	; 0xa9e <__udivmodsi4_ep>
     a96:	a2 1b       	sub	r26, r18
     a98:	b3 0b       	sbc	r27, r19
     a9a:	e4 0b       	sbc	r30, r20
     a9c:	f5 0b       	sbc	r31, r21

00000a9e <__udivmodsi4_ep>:
     a9e:	66 1f       	adc	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	1a 94       	dec	r1
     aa8:	69 f7       	brne	.-38     	; 0xa84 <__udivmodsi4_loop>
     aaa:	60 95       	com	r22
     aac:	70 95       	com	r23
     aae:	80 95       	com	r24
     ab0:	90 95       	com	r25
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	bd 01       	movw	r22, r26
     ab8:	cf 01       	movw	r24, r30
     aba:	08 95       	ret

00000abc <__tablejump2__>:
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	00 24       	eor	r0, r0
     ac2:	00 1c       	adc	r0, r0
     ac4:	0b be       	out	0x3b, r0	; 59
     ac6:	07 90       	elpm	r0, Z+
     ac8:	f6 91       	elpm	r31, Z
     aca:	e0 2d       	mov	r30, r0
     acc:	09 94       	ijmp

00000ace <vsnprintf>:
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	2e 97       	sbiw	r28, 0x0e	; 14
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	8c 01       	movw	r16, r24
     ae8:	fa 01       	movw	r30, r20
     aea:	86 e0       	ldi	r24, 0x06	; 6
     aec:	8c 83       	std	Y+4, r24	; 0x04
     aee:	1a 83       	std	Y+2, r17	; 0x02
     af0:	09 83       	std	Y+1, r16	; 0x01
     af2:	77 ff       	sbrs	r23, 7
     af4:	02 c0       	rjmp	.+4      	; 0xafa <vsnprintf+0x2c>
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e8       	ldi	r23, 0x80	; 128
     afa:	cb 01       	movw	r24, r22
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	9e 83       	std	Y+6, r25	; 0x06
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	a9 01       	movw	r20, r18
     b04:	bf 01       	movw	r22, r30
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	19 d0       	rcall	.+50     	; 0xb3e <vfprintf>
     b0c:	4d 81       	ldd	r20, Y+5	; 0x05
     b0e:	5e 81       	ldd	r21, Y+6	; 0x06
     b10:	57 fd       	sbrc	r21, 7
     b12:	0a c0       	rjmp	.+20     	; 0xb28 <vsnprintf+0x5a>
     b14:	2f 81       	ldd	r18, Y+7	; 0x07
     b16:	38 85       	ldd	r19, Y+8	; 0x08
     b18:	42 17       	cp	r20, r18
     b1a:	53 07       	cpc	r21, r19
     b1c:	0c f4       	brge	.+2      	; 0xb20 <vsnprintf+0x52>
     b1e:	9a 01       	movw	r18, r20
     b20:	f8 01       	movw	r30, r16
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	10 82       	st	Z, r1
     b28:	2e 96       	adiw	r28, 0x0e	; 14
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	f8 94       	cli
     b2e:	de bf       	out	0x3e, r29	; 62
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	cd bf       	out	0x3d, r28	; 61
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	08 95       	ret

00000b3e <vfprintf>:
     b3e:	2f 92       	push	r2
     b40:	3f 92       	push	r3
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2b 97       	sbiw	r28, 0x0b	; 11
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	6c 01       	movw	r12, r24
     b74:	7b 01       	movw	r14, r22
     b76:	8a 01       	movw	r16, r20
     b78:	fc 01       	movw	r30, r24
     b7a:	17 82       	std	Z+7, r1	; 0x07
     b7c:	16 82       	std	Z+6, r1	; 0x06
     b7e:	83 81       	ldd	r24, Z+3	; 0x03
     b80:	81 ff       	sbrs	r24, 1
     b82:	bf c1       	rjmp	.+894    	; 0xf02 <vfprintf+0x3c4>
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	3c 01       	movw	r6, r24
     b8a:	f6 01       	movw	r30, r12
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
     b8e:	f7 01       	movw	r30, r14
     b90:	93 fd       	sbrc	r25, 3
     b92:	85 91       	lpm	r24, Z+
     b94:	93 ff       	sbrs	r25, 3
     b96:	81 91       	ld	r24, Z+
     b98:	7f 01       	movw	r14, r30
     b9a:	88 23       	and	r24, r24
     b9c:	09 f4       	brne	.+2      	; 0xba0 <vfprintf+0x62>
     b9e:	ad c1       	rjmp	.+858    	; 0xefa <vfprintf+0x3bc>
     ba0:	85 32       	cpi	r24, 0x25	; 37
     ba2:	39 f4       	brne	.+14     	; 0xbb2 <vfprintf+0x74>
     ba4:	93 fd       	sbrc	r25, 3
     ba6:	85 91       	lpm	r24, Z+
     ba8:	93 ff       	sbrs	r25, 3
     baa:	81 91       	ld	r24, Z+
     bac:	7f 01       	movw	r14, r30
     bae:	85 32       	cpi	r24, 0x25	; 37
     bb0:	21 f4       	brne	.+8      	; 0xbba <vfprintf+0x7c>
     bb2:	b6 01       	movw	r22, r12
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	d6 d1       	rcall	.+940    	; 0xf64 <fputc>
     bb8:	e8 cf       	rjmp	.-48     	; 0xb8a <vfprintf+0x4c>
     bba:	91 2c       	mov	r9, r1
     bbc:	21 2c       	mov	r2, r1
     bbe:	31 2c       	mov	r3, r1
     bc0:	ff e1       	ldi	r31, 0x1F	; 31
     bc2:	f3 15       	cp	r31, r3
     bc4:	d8 f0       	brcs	.+54     	; 0xbfc <vfprintf+0xbe>
     bc6:	8b 32       	cpi	r24, 0x2B	; 43
     bc8:	79 f0       	breq	.+30     	; 0xbe8 <vfprintf+0xaa>
     bca:	38 f4       	brcc	.+14     	; 0xbda <vfprintf+0x9c>
     bcc:	80 32       	cpi	r24, 0x20	; 32
     bce:	79 f0       	breq	.+30     	; 0xbee <vfprintf+0xb0>
     bd0:	83 32       	cpi	r24, 0x23	; 35
     bd2:	a1 f4       	brne	.+40     	; 0xbfc <vfprintf+0xbe>
     bd4:	23 2d       	mov	r18, r3
     bd6:	20 61       	ori	r18, 0x10	; 16
     bd8:	1d c0       	rjmp	.+58     	; 0xc14 <vfprintf+0xd6>
     bda:	8d 32       	cpi	r24, 0x2D	; 45
     bdc:	61 f0       	breq	.+24     	; 0xbf6 <vfprintf+0xb8>
     bde:	80 33       	cpi	r24, 0x30	; 48
     be0:	69 f4       	brne	.+26     	; 0xbfc <vfprintf+0xbe>
     be2:	23 2d       	mov	r18, r3
     be4:	21 60       	ori	r18, 0x01	; 1
     be6:	16 c0       	rjmp	.+44     	; 0xc14 <vfprintf+0xd6>
     be8:	83 2d       	mov	r24, r3
     bea:	82 60       	ori	r24, 0x02	; 2
     bec:	38 2e       	mov	r3, r24
     bee:	e3 2d       	mov	r30, r3
     bf0:	e4 60       	ori	r30, 0x04	; 4
     bf2:	3e 2e       	mov	r3, r30
     bf4:	2a c0       	rjmp	.+84     	; 0xc4a <vfprintf+0x10c>
     bf6:	f3 2d       	mov	r31, r3
     bf8:	f8 60       	ori	r31, 0x08	; 8
     bfa:	1d c0       	rjmp	.+58     	; 0xc36 <vfprintf+0xf8>
     bfc:	37 fc       	sbrc	r3, 7
     bfe:	2d c0       	rjmp	.+90     	; 0xc5a <vfprintf+0x11c>
     c00:	20 ed       	ldi	r18, 0xD0	; 208
     c02:	28 0f       	add	r18, r24
     c04:	2a 30       	cpi	r18, 0x0A	; 10
     c06:	40 f0       	brcs	.+16     	; 0xc18 <vfprintf+0xda>
     c08:	8e 32       	cpi	r24, 0x2E	; 46
     c0a:	b9 f4       	brne	.+46     	; 0xc3a <vfprintf+0xfc>
     c0c:	36 fc       	sbrc	r3, 6
     c0e:	75 c1       	rjmp	.+746    	; 0xefa <vfprintf+0x3bc>
     c10:	23 2d       	mov	r18, r3
     c12:	20 64       	ori	r18, 0x40	; 64
     c14:	32 2e       	mov	r3, r18
     c16:	19 c0       	rjmp	.+50     	; 0xc4a <vfprintf+0x10c>
     c18:	36 fe       	sbrs	r3, 6
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0xea>
     c1c:	8a e0       	ldi	r24, 0x0A	; 10
     c1e:	98 9e       	mul	r9, r24
     c20:	20 0d       	add	r18, r0
     c22:	11 24       	eor	r1, r1
     c24:	92 2e       	mov	r9, r18
     c26:	11 c0       	rjmp	.+34     	; 0xc4a <vfprintf+0x10c>
     c28:	ea e0       	ldi	r30, 0x0A	; 10
     c2a:	2e 9e       	mul	r2, r30
     c2c:	20 0d       	add	r18, r0
     c2e:	11 24       	eor	r1, r1
     c30:	22 2e       	mov	r2, r18
     c32:	f3 2d       	mov	r31, r3
     c34:	f0 62       	ori	r31, 0x20	; 32
     c36:	3f 2e       	mov	r3, r31
     c38:	08 c0       	rjmp	.+16     	; 0xc4a <vfprintf+0x10c>
     c3a:	8c 36       	cpi	r24, 0x6C	; 108
     c3c:	21 f4       	brne	.+8      	; 0xc46 <vfprintf+0x108>
     c3e:	83 2d       	mov	r24, r3
     c40:	80 68       	ori	r24, 0x80	; 128
     c42:	38 2e       	mov	r3, r24
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x10c>
     c46:	88 36       	cpi	r24, 0x68	; 104
     c48:	41 f4       	brne	.+16     	; 0xc5a <vfprintf+0x11c>
     c4a:	f7 01       	movw	r30, r14
     c4c:	93 fd       	sbrc	r25, 3
     c4e:	85 91       	lpm	r24, Z+
     c50:	93 ff       	sbrs	r25, 3
     c52:	81 91       	ld	r24, Z+
     c54:	7f 01       	movw	r14, r30
     c56:	81 11       	cpse	r24, r1
     c58:	b3 cf       	rjmp	.-154    	; 0xbc0 <vfprintf+0x82>
     c5a:	98 2f       	mov	r25, r24
     c5c:	9f 7d       	andi	r25, 0xDF	; 223
     c5e:	95 54       	subi	r25, 0x45	; 69
     c60:	93 30       	cpi	r25, 0x03	; 3
     c62:	28 f4       	brcc	.+10     	; 0xc6e <vfprintf+0x130>
     c64:	0c 5f       	subi	r16, 0xFC	; 252
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	9f e3       	ldi	r25, 0x3F	; 63
     c6a:	99 83       	std	Y+1, r25	; 0x01
     c6c:	0d c0       	rjmp	.+26     	; 0xc88 <vfprintf+0x14a>
     c6e:	83 36       	cpi	r24, 0x63	; 99
     c70:	31 f0       	breq	.+12     	; 0xc7e <vfprintf+0x140>
     c72:	83 37       	cpi	r24, 0x73	; 115
     c74:	71 f0       	breq	.+28     	; 0xc92 <vfprintf+0x154>
     c76:	83 35       	cpi	r24, 0x53	; 83
     c78:	09 f0       	breq	.+2      	; 0xc7c <vfprintf+0x13e>
     c7a:	55 c0       	rjmp	.+170    	; 0xd26 <vfprintf+0x1e8>
     c7c:	20 c0       	rjmp	.+64     	; 0xcbe <vfprintf+0x180>
     c7e:	f8 01       	movw	r30, r16
     c80:	80 81       	ld	r24, Z
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	0e 5f       	subi	r16, 0xFE	; 254
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	88 24       	eor	r8, r8
     c8a:	83 94       	inc	r8
     c8c:	91 2c       	mov	r9, r1
     c8e:	53 01       	movw	r10, r6
     c90:	12 c0       	rjmp	.+36     	; 0xcb6 <vfprintf+0x178>
     c92:	28 01       	movw	r4, r16
     c94:	f2 e0       	ldi	r31, 0x02	; 2
     c96:	4f 0e       	add	r4, r31
     c98:	51 1c       	adc	r5, r1
     c9a:	f8 01       	movw	r30, r16
     c9c:	a0 80       	ld	r10, Z
     c9e:	b1 80       	ldd	r11, Z+1	; 0x01
     ca0:	36 fe       	sbrs	r3, 6
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <vfprintf+0x16c>
     ca4:	69 2d       	mov	r22, r9
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <vfprintf+0x170>
     caa:	6f ef       	ldi	r22, 0xFF	; 255
     cac:	7f ef       	ldi	r23, 0xFF	; 255
     cae:	c5 01       	movw	r24, r10
     cb0:	4e d1       	rcall	.+668    	; 0xf4e <strnlen>
     cb2:	4c 01       	movw	r8, r24
     cb4:	82 01       	movw	r16, r4
     cb6:	f3 2d       	mov	r31, r3
     cb8:	ff 77       	andi	r31, 0x7F	; 127
     cba:	3f 2e       	mov	r3, r31
     cbc:	15 c0       	rjmp	.+42     	; 0xce8 <vfprintf+0x1aa>
     cbe:	28 01       	movw	r4, r16
     cc0:	22 e0       	ldi	r18, 0x02	; 2
     cc2:	42 0e       	add	r4, r18
     cc4:	51 1c       	adc	r5, r1
     cc6:	f8 01       	movw	r30, r16
     cc8:	a0 80       	ld	r10, Z
     cca:	b1 80       	ldd	r11, Z+1	; 0x01
     ccc:	36 fe       	sbrs	r3, 6
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <vfprintf+0x198>
     cd0:	69 2d       	mov	r22, r9
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x19c>
     cd6:	6f ef       	ldi	r22, 0xFF	; 255
     cd8:	7f ef       	ldi	r23, 0xFF	; 255
     cda:	c5 01       	movw	r24, r10
     cdc:	2d d1       	rcall	.+602    	; 0xf38 <strnlen_P>
     cde:	4c 01       	movw	r8, r24
     ce0:	f3 2d       	mov	r31, r3
     ce2:	f0 68       	ori	r31, 0x80	; 128
     ce4:	3f 2e       	mov	r3, r31
     ce6:	82 01       	movw	r16, r4
     ce8:	33 fc       	sbrc	r3, 3
     cea:	19 c0       	rjmp	.+50     	; 0xd1e <vfprintf+0x1e0>
     cec:	82 2d       	mov	r24, r2
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	88 16       	cp	r8, r24
     cf2:	99 06       	cpc	r9, r25
     cf4:	a0 f4       	brcc	.+40     	; 0xd1e <vfprintf+0x1e0>
     cf6:	b6 01       	movw	r22, r12
     cf8:	80 e2       	ldi	r24, 0x20	; 32
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	33 d1       	rcall	.+614    	; 0xf64 <fputc>
     cfe:	2a 94       	dec	r2
     d00:	f5 cf       	rjmp	.-22     	; 0xcec <vfprintf+0x1ae>
     d02:	f5 01       	movw	r30, r10
     d04:	37 fc       	sbrc	r3, 7
     d06:	85 91       	lpm	r24, Z+
     d08:	37 fe       	sbrs	r3, 7
     d0a:	81 91       	ld	r24, Z+
     d0c:	5f 01       	movw	r10, r30
     d0e:	b6 01       	movw	r22, r12
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	28 d1       	rcall	.+592    	; 0xf64 <fputc>
     d14:	21 10       	cpse	r2, r1
     d16:	2a 94       	dec	r2
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	82 1a       	sub	r8, r18
     d1c:	91 08       	sbc	r9, r1
     d1e:	81 14       	cp	r8, r1
     d20:	91 04       	cpc	r9, r1
     d22:	79 f7       	brne	.-34     	; 0xd02 <vfprintf+0x1c4>
     d24:	e1 c0       	rjmp	.+450    	; 0xee8 <vfprintf+0x3aa>
     d26:	84 36       	cpi	r24, 0x64	; 100
     d28:	11 f0       	breq	.+4      	; 0xd2e <vfprintf+0x1f0>
     d2a:	89 36       	cpi	r24, 0x69	; 105
     d2c:	39 f5       	brne	.+78     	; 0xd7c <vfprintf+0x23e>
     d2e:	f8 01       	movw	r30, r16
     d30:	37 fe       	sbrs	r3, 7
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <vfprintf+0x204>
     d34:	60 81       	ld	r22, Z
     d36:	71 81       	ldd	r23, Z+1	; 0x01
     d38:	82 81       	ldd	r24, Z+2	; 0x02
     d3a:	93 81       	ldd	r25, Z+3	; 0x03
     d3c:	0c 5f       	subi	r16, 0xFC	; 252
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	08 c0       	rjmp	.+16     	; 0xd52 <vfprintf+0x214>
     d42:	60 81       	ld	r22, Z
     d44:	71 81       	ldd	r23, Z+1	; 0x01
     d46:	07 2e       	mov	r0, r23
     d48:	00 0c       	add	r0, r0
     d4a:	88 0b       	sbc	r24, r24
     d4c:	99 0b       	sbc	r25, r25
     d4e:	0e 5f       	subi	r16, 0xFE	; 254
     d50:	1f 4f       	sbci	r17, 0xFF	; 255
     d52:	f3 2d       	mov	r31, r3
     d54:	ff 76       	andi	r31, 0x6F	; 111
     d56:	3f 2e       	mov	r3, r31
     d58:	97 ff       	sbrs	r25, 7
     d5a:	09 c0       	rjmp	.+18     	; 0xd6e <vfprintf+0x230>
     d5c:	90 95       	com	r25
     d5e:	80 95       	com	r24
     d60:	70 95       	com	r23
     d62:	61 95       	neg	r22
     d64:	7f 4f       	sbci	r23, 0xFF	; 255
     d66:	8f 4f       	sbci	r24, 0xFF	; 255
     d68:	9f 4f       	sbci	r25, 0xFF	; 255
     d6a:	f0 68       	ori	r31, 0x80	; 128
     d6c:	3f 2e       	mov	r3, r31
     d6e:	2a e0       	ldi	r18, 0x0A	; 10
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	a3 01       	movw	r20, r6
     d74:	33 d1       	rcall	.+614    	; 0xfdc <__ultoa_invert>
     d76:	88 2e       	mov	r8, r24
     d78:	86 18       	sub	r8, r6
     d7a:	44 c0       	rjmp	.+136    	; 0xe04 <vfprintf+0x2c6>
     d7c:	85 37       	cpi	r24, 0x75	; 117
     d7e:	31 f4       	brne	.+12     	; 0xd8c <vfprintf+0x24e>
     d80:	23 2d       	mov	r18, r3
     d82:	2f 7e       	andi	r18, 0xEF	; 239
     d84:	b2 2e       	mov	r11, r18
     d86:	2a e0       	ldi	r18, 0x0A	; 10
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	25 c0       	rjmp	.+74     	; 0xdd6 <vfprintf+0x298>
     d8c:	93 2d       	mov	r25, r3
     d8e:	99 7f       	andi	r25, 0xF9	; 249
     d90:	b9 2e       	mov	r11, r25
     d92:	8f 36       	cpi	r24, 0x6F	; 111
     d94:	c1 f0       	breq	.+48     	; 0xdc6 <vfprintf+0x288>
     d96:	18 f4       	brcc	.+6      	; 0xd9e <vfprintf+0x260>
     d98:	88 35       	cpi	r24, 0x58	; 88
     d9a:	79 f0       	breq	.+30     	; 0xdba <vfprintf+0x27c>
     d9c:	ae c0       	rjmp	.+348    	; 0xefa <vfprintf+0x3bc>
     d9e:	80 37       	cpi	r24, 0x70	; 112
     da0:	19 f0       	breq	.+6      	; 0xda8 <vfprintf+0x26a>
     da2:	88 37       	cpi	r24, 0x78	; 120
     da4:	21 f0       	breq	.+8      	; 0xdae <vfprintf+0x270>
     da6:	a9 c0       	rjmp	.+338    	; 0xefa <vfprintf+0x3bc>
     da8:	e9 2f       	mov	r30, r25
     daa:	e0 61       	ori	r30, 0x10	; 16
     dac:	be 2e       	mov	r11, r30
     dae:	b4 fe       	sbrs	r11, 4
     db0:	0d c0       	rjmp	.+26     	; 0xdcc <vfprintf+0x28e>
     db2:	fb 2d       	mov	r31, r11
     db4:	f4 60       	ori	r31, 0x04	; 4
     db6:	bf 2e       	mov	r11, r31
     db8:	09 c0       	rjmp	.+18     	; 0xdcc <vfprintf+0x28e>
     dba:	34 fe       	sbrs	r3, 4
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <vfprintf+0x294>
     dbe:	29 2f       	mov	r18, r25
     dc0:	26 60       	ori	r18, 0x06	; 6
     dc2:	b2 2e       	mov	r11, r18
     dc4:	06 c0       	rjmp	.+12     	; 0xdd2 <vfprintf+0x294>
     dc6:	28 e0       	ldi	r18, 0x08	; 8
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	05 c0       	rjmp	.+10     	; 0xdd6 <vfprintf+0x298>
     dcc:	20 e1       	ldi	r18, 0x10	; 16
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <vfprintf+0x298>
     dd2:	20 e1       	ldi	r18, 0x10	; 16
     dd4:	32 e0       	ldi	r19, 0x02	; 2
     dd6:	f8 01       	movw	r30, r16
     dd8:	b7 fe       	sbrs	r11, 7
     dda:	07 c0       	rjmp	.+14     	; 0xdea <vfprintf+0x2ac>
     ddc:	60 81       	ld	r22, Z
     dde:	71 81       	ldd	r23, Z+1	; 0x01
     de0:	82 81       	ldd	r24, Z+2	; 0x02
     de2:	93 81       	ldd	r25, Z+3	; 0x03
     de4:	0c 5f       	subi	r16, 0xFC	; 252
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <vfprintf+0x2b8>
     dea:	60 81       	ld	r22, Z
     dec:	71 81       	ldd	r23, Z+1	; 0x01
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 5f       	subi	r16, 0xFE	; 254
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
     df6:	a3 01       	movw	r20, r6
     df8:	f1 d0       	rcall	.+482    	; 0xfdc <__ultoa_invert>
     dfa:	88 2e       	mov	r8, r24
     dfc:	86 18       	sub	r8, r6
     dfe:	fb 2d       	mov	r31, r11
     e00:	ff 77       	andi	r31, 0x7F	; 127
     e02:	3f 2e       	mov	r3, r31
     e04:	36 fe       	sbrs	r3, 6
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <vfprintf+0x2e4>
     e08:	23 2d       	mov	r18, r3
     e0a:	2e 7f       	andi	r18, 0xFE	; 254
     e0c:	a2 2e       	mov	r10, r18
     e0e:	89 14       	cp	r8, r9
     e10:	58 f4       	brcc	.+22     	; 0xe28 <vfprintf+0x2ea>
     e12:	34 fe       	sbrs	r3, 4
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <vfprintf+0x2ee>
     e16:	32 fc       	sbrc	r3, 2
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <vfprintf+0x2ee>
     e1a:	83 2d       	mov	r24, r3
     e1c:	8e 7e       	andi	r24, 0xEE	; 238
     e1e:	a8 2e       	mov	r10, r24
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <vfprintf+0x2ee>
     e22:	b8 2c       	mov	r11, r8
     e24:	a3 2c       	mov	r10, r3
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x2f0>
     e28:	b8 2c       	mov	r11, r8
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <vfprintf+0x2f0>
     e2c:	b9 2c       	mov	r11, r9
     e2e:	a4 fe       	sbrs	r10, 4
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <vfprintf+0x312>
     e32:	fe 01       	movw	r30, r28
     e34:	e8 0d       	add	r30, r8
     e36:	f1 1d       	adc	r31, r1
     e38:	80 81       	ld	r24, Z
     e3a:	80 33       	cpi	r24, 0x30	; 48
     e3c:	21 f4       	brne	.+8      	; 0xe46 <vfprintf+0x308>
     e3e:	9a 2d       	mov	r25, r10
     e40:	99 7e       	andi	r25, 0xE9	; 233
     e42:	a9 2e       	mov	r10, r25
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <vfprintf+0x31a>
     e46:	a2 fe       	sbrs	r10, 2
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <vfprintf+0x318>
     e4a:	b3 94       	inc	r11
     e4c:	b3 94       	inc	r11
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <vfprintf+0x31a>
     e50:	8a 2d       	mov	r24, r10
     e52:	86 78       	andi	r24, 0x86	; 134
     e54:	09 f0       	breq	.+2      	; 0xe58 <vfprintf+0x31a>
     e56:	b3 94       	inc	r11
     e58:	a3 fc       	sbrc	r10, 3
     e5a:	10 c0       	rjmp	.+32     	; 0xe7c <vfprintf+0x33e>
     e5c:	a0 fe       	sbrs	r10, 0
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <vfprintf+0x32e>
     e60:	b2 14       	cp	r11, r2
     e62:	80 f4       	brcc	.+32     	; 0xe84 <vfprintf+0x346>
     e64:	28 0c       	add	r2, r8
     e66:	92 2c       	mov	r9, r2
     e68:	9b 18       	sub	r9, r11
     e6a:	0d c0       	rjmp	.+26     	; 0xe86 <vfprintf+0x348>
     e6c:	b2 14       	cp	r11, r2
     e6e:	58 f4       	brcc	.+22     	; 0xe86 <vfprintf+0x348>
     e70:	b6 01       	movw	r22, r12
     e72:	80 e2       	ldi	r24, 0x20	; 32
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	76 d0       	rcall	.+236    	; 0xf64 <fputc>
     e78:	b3 94       	inc	r11
     e7a:	f8 cf       	rjmp	.-16     	; 0xe6c <vfprintf+0x32e>
     e7c:	b2 14       	cp	r11, r2
     e7e:	18 f4       	brcc	.+6      	; 0xe86 <vfprintf+0x348>
     e80:	2b 18       	sub	r2, r11
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x34a>
     e84:	98 2c       	mov	r9, r8
     e86:	21 2c       	mov	r2, r1
     e88:	a4 fe       	sbrs	r10, 4
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <vfprintf+0x36c>
     e8c:	b6 01       	movw	r22, r12
     e8e:	80 e3       	ldi	r24, 0x30	; 48
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	68 d0       	rcall	.+208    	; 0xf64 <fputc>
     e94:	a2 fe       	sbrs	r10, 2
     e96:	16 c0       	rjmp	.+44     	; 0xec4 <vfprintf+0x386>
     e98:	a1 fc       	sbrc	r10, 1
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <vfprintf+0x364>
     e9c:	88 e7       	ldi	r24, 0x78	; 120
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <vfprintf+0x368>
     ea2:	88 e5       	ldi	r24, 0x58	; 88
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	b6 01       	movw	r22, r12
     ea8:	0c c0       	rjmp	.+24     	; 0xec2 <vfprintf+0x384>
     eaa:	8a 2d       	mov	r24, r10
     eac:	86 78       	andi	r24, 0x86	; 134
     eae:	51 f0       	breq	.+20     	; 0xec4 <vfprintf+0x386>
     eb0:	a1 fe       	sbrs	r10, 1
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <vfprintf+0x37a>
     eb4:	8b e2       	ldi	r24, 0x2B	; 43
     eb6:	01 c0       	rjmp	.+2      	; 0xeba <vfprintf+0x37c>
     eb8:	80 e2       	ldi	r24, 0x20	; 32
     eba:	a7 fc       	sbrc	r10, 7
     ebc:	8d e2       	ldi	r24, 0x2D	; 45
     ebe:	b6 01       	movw	r22, r12
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	50 d0       	rcall	.+160    	; 0xf64 <fputc>
     ec4:	89 14       	cp	r8, r9
     ec6:	30 f4       	brcc	.+12     	; 0xed4 <vfprintf+0x396>
     ec8:	b6 01       	movw	r22, r12
     eca:	80 e3       	ldi	r24, 0x30	; 48
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	4a d0       	rcall	.+148    	; 0xf64 <fputc>
     ed0:	9a 94       	dec	r9
     ed2:	f8 cf       	rjmp	.-16     	; 0xec4 <vfprintf+0x386>
     ed4:	8a 94       	dec	r8
     ed6:	f3 01       	movw	r30, r6
     ed8:	e8 0d       	add	r30, r8
     eda:	f1 1d       	adc	r31, r1
     edc:	80 81       	ld	r24, Z
     ede:	b6 01       	movw	r22, r12
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	40 d0       	rcall	.+128    	; 0xf64 <fputc>
     ee4:	81 10       	cpse	r8, r1
     ee6:	f6 cf       	rjmp	.-20     	; 0xed4 <vfprintf+0x396>
     ee8:	22 20       	and	r2, r2
     eea:	09 f4       	brne	.+2      	; 0xeee <vfprintf+0x3b0>
     eec:	4e ce       	rjmp	.-868    	; 0xb8a <vfprintf+0x4c>
     eee:	b6 01       	movw	r22, r12
     ef0:	80 e2       	ldi	r24, 0x20	; 32
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	37 d0       	rcall	.+110    	; 0xf64 <fputc>
     ef6:	2a 94       	dec	r2
     ef8:	f7 cf       	rjmp	.-18     	; 0xee8 <vfprintf+0x3aa>
     efa:	f6 01       	movw	r30, r12
     efc:	86 81       	ldd	r24, Z+6	; 0x06
     efe:	97 81       	ldd	r25, Z+7	; 0x07
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <vfprintf+0x3c8>
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	9f ef       	ldi	r25, 0xFF	; 255
     f06:	2b 96       	adiw	r28, 0x0b	; 11
     f08:	0f b6       	in	r0, 0x3f	; 63
     f0a:	f8 94       	cli
     f0c:	de bf       	out	0x3e, r29	; 62
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	cd bf       	out	0x3d, r28	; 61
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	9f 90       	pop	r9
     f28:	8f 90       	pop	r8
     f2a:	7f 90       	pop	r7
     f2c:	6f 90       	pop	r6
     f2e:	5f 90       	pop	r5
     f30:	4f 90       	pop	r4
     f32:	3f 90       	pop	r3
     f34:	2f 90       	pop	r2
     f36:	08 95       	ret

00000f38 <strnlen_P>:
     f38:	fc 01       	movw	r30, r24
     f3a:	05 90       	lpm	r0, Z+
     f3c:	61 50       	subi	r22, 0x01	; 1
     f3e:	70 40       	sbci	r23, 0x00	; 0
     f40:	01 10       	cpse	r0, r1
     f42:	d8 f7       	brcc	.-10     	; 0xf3a <strnlen_P+0x2>
     f44:	80 95       	com	r24
     f46:	90 95       	com	r25
     f48:	8e 0f       	add	r24, r30
     f4a:	9f 1f       	adc	r25, r31
     f4c:	08 95       	ret

00000f4e <strnlen>:
     f4e:	fc 01       	movw	r30, r24
     f50:	61 50       	subi	r22, 0x01	; 1
     f52:	70 40       	sbci	r23, 0x00	; 0
     f54:	01 90       	ld	r0, Z+
     f56:	01 10       	cpse	r0, r1
     f58:	d8 f7       	brcc	.-10     	; 0xf50 <strnlen+0x2>
     f5a:	80 95       	com	r24
     f5c:	90 95       	com	r25
     f5e:	8e 0f       	add	r24, r30
     f60:	9f 1f       	adc	r25, r31
     f62:	08 95       	ret

00000f64 <fputc>:
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	fb 01       	movw	r30, r22
     f6e:	23 81       	ldd	r18, Z+3	; 0x03
     f70:	21 fd       	sbrc	r18, 1
     f72:	03 c0       	rjmp	.+6      	; 0xf7a <fputc+0x16>
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	2c c0       	rjmp	.+88     	; 0xfd2 <fputc+0x6e>
     f7a:	22 ff       	sbrs	r18, 2
     f7c:	16 c0       	rjmp	.+44     	; 0xfaa <fputc+0x46>
     f7e:	46 81       	ldd	r20, Z+6	; 0x06
     f80:	57 81       	ldd	r21, Z+7	; 0x07
     f82:	24 81       	ldd	r18, Z+4	; 0x04
     f84:	35 81       	ldd	r19, Z+5	; 0x05
     f86:	42 17       	cp	r20, r18
     f88:	53 07       	cpc	r21, r19
     f8a:	44 f4       	brge	.+16     	; 0xf9c <fputc+0x38>
     f8c:	a0 81       	ld	r26, Z
     f8e:	b1 81       	ldd	r27, Z+1	; 0x01
     f90:	9d 01       	movw	r18, r26
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	3f 4f       	sbci	r19, 0xFF	; 255
     f96:	31 83       	std	Z+1, r19	; 0x01
     f98:	20 83       	st	Z, r18
     f9a:	8c 93       	st	X, r24
     f9c:	26 81       	ldd	r18, Z+6	; 0x06
     f9e:	37 81       	ldd	r19, Z+7	; 0x07
     fa0:	2f 5f       	subi	r18, 0xFF	; 255
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	37 83       	std	Z+7, r19	; 0x07
     fa6:	26 83       	std	Z+6, r18	; 0x06
     fa8:	14 c0       	rjmp	.+40     	; 0xfd2 <fputc+0x6e>
     faa:	8b 01       	movw	r16, r22
     fac:	ec 01       	movw	r28, r24
     fae:	fb 01       	movw	r30, r22
     fb0:	00 84       	ldd	r0, Z+8	; 0x08
     fb2:	f1 85       	ldd	r31, Z+9	; 0x09
     fb4:	e0 2d       	mov	r30, r0
     fb6:	09 95       	icall
     fb8:	89 2b       	or	r24, r25
     fba:	e1 f6       	brne	.-72     	; 0xf74 <fputc+0x10>
     fbc:	d8 01       	movw	r26, r16
     fbe:	16 96       	adiw	r26, 0x06	; 6
     fc0:	8d 91       	ld	r24, X+
     fc2:	9c 91       	ld	r25, X
     fc4:	17 97       	sbiw	r26, 0x07	; 7
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	17 96       	adiw	r26, 0x07	; 7
     fca:	9c 93       	st	X, r25
     fcc:	8e 93       	st	-X, r24
     fce:	16 97       	sbiw	r26, 0x06	; 6
     fd0:	ce 01       	movw	r24, r28
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <__ultoa_invert>:
     fdc:	fa 01       	movw	r30, r20
     fde:	aa 27       	eor	r26, r26
     fe0:	28 30       	cpi	r18, 0x08	; 8
     fe2:	51 f1       	breq	.+84     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
     fe4:	20 31       	cpi	r18, 0x10	; 16
     fe6:	81 f1       	breq	.+96     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
     fe8:	e8 94       	clt
     fea:	6f 93       	push	r22
     fec:	6e 7f       	andi	r22, 0xFE	; 254
     fee:	6e 5f       	subi	r22, 0xFE	; 254
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	af 4f       	sbci	r26, 0xFF	; 255
     ff8:	b1 e0       	ldi	r27, 0x01	; 1
     ffa:	3e d0       	rcall	.+124    	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
     ffc:	b4 e0       	ldi	r27, 0x04	; 4
     ffe:	3c d0       	rcall	.+120    	; 0x1078 <__DATA_REGION_LENGTH__+0x78>
    1000:	67 0f       	add	r22, r23
    1002:	78 1f       	adc	r23, r24
    1004:	89 1f       	adc	r24, r25
    1006:	9a 1f       	adc	r25, r26
    1008:	a1 1d       	adc	r26, r1
    100a:	68 0f       	add	r22, r24
    100c:	79 1f       	adc	r23, r25
    100e:	8a 1f       	adc	r24, r26
    1010:	91 1d       	adc	r25, r1
    1012:	a1 1d       	adc	r26, r1
    1014:	6a 0f       	add	r22, r26
    1016:	71 1d       	adc	r23, r1
    1018:	81 1d       	adc	r24, r1
    101a:	91 1d       	adc	r25, r1
    101c:	a1 1d       	adc	r26, r1
    101e:	20 d0       	rcall	.+64     	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    1020:	09 f4       	brne	.+2      	; 0x1024 <__DATA_REGION_LENGTH__+0x24>
    1022:	68 94       	set
    1024:	3f 91       	pop	r19
    1026:	2a e0       	ldi	r18, 0x0A	; 10
    1028:	26 9f       	mul	r18, r22
    102a:	11 24       	eor	r1, r1
    102c:	30 19       	sub	r19, r0
    102e:	30 5d       	subi	r19, 0xD0	; 208
    1030:	31 93       	st	Z+, r19
    1032:	de f6       	brtc	.-74     	; 0xfea <__ultoa_invert+0xe>
    1034:	cf 01       	movw	r24, r30
    1036:	08 95       	ret
    1038:	46 2f       	mov	r20, r22
    103a:	47 70       	andi	r20, 0x07	; 7
    103c:	40 5d       	subi	r20, 0xD0	; 208
    103e:	41 93       	st	Z+, r20
    1040:	b3 e0       	ldi	r27, 0x03	; 3
    1042:	0f d0       	rcall	.+30     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    1044:	c9 f7       	brne	.-14     	; 0x1038 <__DATA_REGION_LENGTH__+0x38>
    1046:	f6 cf       	rjmp	.-20     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1048:	46 2f       	mov	r20, r22
    104a:	4f 70       	andi	r20, 0x0F	; 15
    104c:	40 5d       	subi	r20, 0xD0	; 208
    104e:	4a 33       	cpi	r20, 0x3A	; 58
    1050:	18 f0       	brcs	.+6      	; 0x1058 <__DATA_REGION_LENGTH__+0x58>
    1052:	49 5d       	subi	r20, 0xD9	; 217
    1054:	31 fd       	sbrc	r19, 1
    1056:	40 52       	subi	r20, 0x20	; 32
    1058:	41 93       	st	Z+, r20
    105a:	02 d0       	rcall	.+4      	; 0x1060 <__DATA_REGION_LENGTH__+0x60>
    105c:	a9 f7       	brne	.-22     	; 0x1048 <__DATA_REGION_LENGTH__+0x48>
    105e:	ea cf       	rjmp	.-44     	; 0x1034 <__DATA_REGION_LENGTH__+0x34>
    1060:	b4 e0       	ldi	r27, 0x04	; 4
    1062:	a6 95       	lsr	r26
    1064:	97 95       	ror	r25
    1066:	87 95       	ror	r24
    1068:	77 95       	ror	r23
    106a:	67 95       	ror	r22
    106c:	ba 95       	dec	r27
    106e:	c9 f7       	brne	.-14     	; 0x1062 <__DATA_REGION_LENGTH__+0x62>
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	61 05       	cpc	r22, r1
    1074:	71 05       	cpc	r23, r1
    1076:	08 95       	ret
    1078:	9b 01       	movw	r18, r22
    107a:	ac 01       	movw	r20, r24
    107c:	0a 2e       	mov	r0, r26
    107e:	06 94       	lsr	r0
    1080:	57 95       	ror	r21
    1082:	47 95       	ror	r20
    1084:	37 95       	ror	r19
    1086:	27 95       	ror	r18
    1088:	ba 95       	dec	r27
    108a:	c9 f7       	brne	.-14     	; 0x107e <__DATA_REGION_LENGTH__+0x7e>
    108c:	62 0f       	add	r22, r18
    108e:	73 1f       	adc	r23, r19
    1090:	84 1f       	adc	r24, r20
    1092:	95 1f       	adc	r25, r21
    1094:	a0 1d       	adc	r26, r0
    1096:	08 95       	ret

00001098 <_exit>:
    1098:	f8 94       	cli

0000109a <__stop_program>:
    109a:	ff cf       	rjmp	.-2      	; 0x109a <__stop_program>
